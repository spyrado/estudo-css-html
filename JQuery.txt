******************************************************************** jQuery ********************************************************************

---------------------------- AJAX jQuery ------------------------------

Pegando informações do servidor via get com jQuery.
Documentação: https://api.jquery.com/jquery.get/

$.get("url", função(parâmetro)); -> 
    1° Como primeiro parâmetro passamos a url que desejamos consumir via
    Ajax.
    2° Como segundo parâmetro passamos uma função com um parâmetro, esse parâmetro é quem vai receber os dados que foram puxados do servidor, e é com esse parâmetro que teremos acesso as informações do servidor.
    EXEMPLO PRÁTICO:
        function fraseAleatoria() {

            $.get('http://localhost:3000/frases', function(retorno) {

                console.log(retorno[0].texto);
            });
        }
EXIBINDO ERROS AJAX

.fail(function) -> Se a requisição falhar, executa esta função.(.fail()).
    EXEMPLO:
        function fraseAleatoria(){ 
            $.get("http://localhost:3000/frases", trocaFraseAleatoria)
            .fail(function(){
                $("#erro").toggle();
                setTimeout(function(){
                    $("#erro").toggle();
                }, 5000);
            });
        }

.always() -> Se a requisição tiver sucesso ou fracasso, esta função 
    executará mesmo assim.
        EXEMPLO:
            function fraseAleatoria(){
                var spinner = $("#spinner"), erro = $("#erro");
                spinner.toggle();
                $.get("http://localhost:3000/fraases", trocaFraseAleatoria)
                .fail(function(){
                    erro.slideDown();
                    setTimeout(function(){
                        erro.slideUp();
                    },5000);
                })
                .always(function(){
                    spinner.toggle();
                });
            }

--------------- Buscando dados com get AJAX ---------------


var fraseId = $("#frase-id").val(); -> pegamos o id do campo.
var dados = {id: fraseId}; -> colocamos o valor desse campo, na propriedade
    desejada, no caso queremos o id.
$.get("http://localhost:3000/frases", dados, trocaFrase); -> passamos o 
    objeto dados como 2° Parâmetro( IMPORTANTE, TEM QUE SER COMO SEGUNDO PARÂMETRO), e depois passamos a função que irá retornar o objeto buscado, para nós.
        EXEMPLO 1: $.get("http://localhost:3000/frases", dados, function(data){
            console.log(data);
        });
        EXEMPLO 2:
            function buscaFrase(){
                var fraseId = $("#frase-id").val();
                var dados = {id: fraseId};
                console.log("id escolhido foi:" +fraseId);
                $.get("http://localhost:3000/frases", dados, trocaFrase);
            }
            
            function trocaFrase(data){
                $(".frase").text(data.texto);
                atualizaTempoInicial(data.tempo);
                atualizaTamanhoFrase();
            }

---------------------------- Eventos jQuery ------------------------------

SINTAX: variavel.on("nomeEvento", função{
    //conteudo da função
});

campo.on("click",function(){
    console.log("Campo clicado");
});

IMPORTANTE!
Alguns evento no jQuery tem atalhos para eventos comuns, como click focus blur, o atalho seria o seguinte:

campo.click(function(){
    console.log("Campo clicado");
});

-------------- Eventos jQuery --------------

ready -> assim que a pagina carrega, o evento é disparádo, diferente do
    onload do javascript puro, que ele necessita que tudo da página seja carregado para disparar o evento(videos imagens tudo).
        exemplo:
            $(document).ready(function(){
                atualizaTamanhoFrase();
                iniciaContadores();
                iniciaCronometro();
                $("#botao-reiniciar").click(reiniciaJogo);
            });
            
ATALHO PARA ready:

    $(function(){
        atualizaTamanhoFrase();
        iniciaContadores();
        iniciaCronometro();
        $("#botao-reiniciar").click(reiniciaJogo);
    });



---------------------------- Função Seletora jQuery ------------------------------

A função seletora aceita como parâmetro seletores CSS.

var frase = jQuery(".frase");
    OU o famoso dolar, que é a mesma coisa, só é um atalho que faz referência ao seletor jQuery
        var frase = $(".frase");
        
---------------------------- Funções jQuery ANIMATION------------------------------

scrollTop:

x.animate({objeto: algo}, tempoParaAnimacao); -> cria animações customizadas, 
    EXEMPLO:
        function scrollPlacar() {
            var posicaoPlacar = $(".placar").offset().top;

            $("html, body").animate({
                scrollTop: posicaoPlacar+"px"
            }, 1000);
        }
    RESULTADO:
        pega o html e body, para ter referência do tamanho da página,
        depois vai scrollar até a posição do placar.

x.offset().top -> retorna a posição do TOP do elemento.

x.offset().left -> retorna a posição do LEFT do elemento.

x.offset() -> retorna a posição do elemento (top e left do elemento).

x.top() -> para a animação que estiver acontecendo no momento.

x.fadeTo("milissegundos",opacidade de 0 a 1) -> Faz uma animação diminuindo a 
    opacidade do elemento.

x.fadeToggle("millisegundos") -> aparece ou desaparece com o tempo.

x.fadeIn("millisegundos"); -> o elemento vai aparecendo ao longo do tempo.

x.fadeOut("millisegundos"); -> o elemento vai desaparecendo ao longo do tempo.


x.slideToggle("milisegundos") -> faz uma animação para cima se tiver para 
    baixo, e para baixo se tiver para cima.

x.slideUp("milisegundos") -> faz uma animação para CIMA.

x.slideDown("milisegundos") -> faz uma animação para BAIXO.

x.toggle(); -> se tiver escondido ele mostra, se não tiver ele esconde.

x.hide(); -> esconde o elemento.

x.show(); -> exibe o elemento.
      
---------------------------- Funções jQuery ------------------------------

x.each -> Funciona como o forEach e for normal.
    EXEMPLO:
    linhas.each(function(){
        var usuario = $(this).find("td:nth-child(1)").text();
        console.log(usuario);
    });
    EXEMPLO 2:
        var letras = ['a', 'b', 'c'];

        $.each(letras, function() {

             console.log(this);
        });
    
x.is(":visible"); -> O jQuery possui a função is que permite consultar uma  
    pseudo class. Toda vez que um elemento esta com display diferente de none ele ganha a pseudo classe :visible . A função is retorna true caso o elemento esteja visível. Se ele estiver visível, precisamos escondê-lo e isso é feito através da função hide. Para exibir o elemento, é usada a função show.

x.hasClass("nomeClasse") -> retorna true se o elemento possui a classe,
    e false se não possuir.
        EXEMPLO DE UTILIZAÇÃO:        
            $('#botao-promocao').click(function() {

              var promocoes = $('.promocoes');
              if(promocoes.hasClass('invisivel')) {

                promocoes.removeClass('invisivel');
              } else {
                promocoes.addClass('invisivel');
              }

            });

var x = $("<tagHTML>"); -> cria um elemento html.
    EXEMPLO:
        var linha  = $("<tr>"); -> CRIA um elemento TR.

elemento.parent("seletor") -> Pega o elemento e procura por um pai com o mesmo nome do seletor colocado como parâmeto:
    EXEMPLO:
        HTML:
            <section>
                <div>
                    <h1>Olá</h1>
                </div>
                <div class="segunda"> <-- retorna apenas esta div.
                    <h1>Mundo</h1>
                </div>
            </section>
        JQUERY:
            $("h1").parent(".segunda");
        RESULTADO:
            O código $("h1").parent(".segunda"); seleciona todos os h1s da página, e busca em cada um deles por um pai com a classe segunda. Neste caso, retornando apenas a div inferior.

elemento.parent().parent(); -> acessa o pai do pai do elemento, e assim por diante.
    EXEMPLO:
este é o pai do td-><tr> <- .parent().parent(), acessa aqui (o pai do <tr>)
                        <td>Nicolas</td>
                        <td>1</td>
este é o pai do a  ---> <td>   <--- .parent(), acessa aqui ( o pai do <a>)
este é o elemento --->      <a href="#" class="btn-remove"><i class="small
                            material-icons">delete</i></a>
                        </td>
                    </tr>
    JQUERY:
         $(".btn-remove").click(function(event){
            event.preventDefault();
            $(this).parent().parent().remove();
        });
    

elemento.parent(); -> acessa o pai do elemento.
    EXEMPLO:
        HTML: 
            <div>
                sou uma div
                <p>Olá</p>
            </div>
        jQuery:
            $("p").parent().css({"color": "red", "border": "2px solid red"});
        Resultado:
            A <div> que é o PAI do <p> fica estilizada com cor red e borda red.

elemento.prepend("string") -> adiciona uma string no COMEÇO do elemento 
    selecionado, SEMPRE COMO FILHO do elemento.

elemento.append("string") -> adiciona uma string no FINAL do elemento 
    selecionado, SEMPRE COMO FILHO do elemento.
        EXEMPLO:
            function inserePlacar(){
                var corpoTabela = $(".placar").find("tbody");
                var usuario = "Nicolas";
                var numPalavras = $("#contador-palavras").text();
    string -->  var linha = "<tr>"+
                                "<td>"+usuario+"</td>"+
                                "<td>"+numPalavras+"</td>"+
                            "</tr>";
                corpoTabela.append(linha);
            }

.find() -> Obtenha os descendentes de cada elemento no conjunto atual de
    elementos correspondentes, filtrados por um seletor, objeto jQuery ou elemento, exemplo:
        HTML:
            <section class="placar">
            <h3 class="center">Placar</h3>
            <table class="centered bordered">
        jQuery:
            var placar = $(".placar").find("table");
            console.log(placar);
        Resultado:
            [table.centered.bordered, prevObject: jQuery.fn.init(1)]


.toggleClass("nomeClasse", false); //sempre retira

.toggleClass("nomeClasse", true); //sempre adiciona

.toggleClass("nomeClasse") -> Adiciona OU Remove uma ou MAIS classes, se 
    já existir a classe, ele remove, se não existir, ele adiciona.

.removeClass("nomeClasse"); -> Remove uma classe de um elemento.

.addClass("nomeClasse"); -> Adiciona uma classe ao elemento.

Devemos usar a função css() do jQuery que recebe o nome da propriedade:
    var x = elemento.css("background-color"); -> RECEBE a cor do elemento selecionado.

        Também é possivel recuperar mais de um valor passando um array de propriedades, por exemplo:
            var valores = $("div").css(["background-color","width"]);

                O resultado é um objeto que possui todos os valores. Por exemplo para acessar o width podemos escrever:
                    valores.width


.css("nomePropriedade", "valorPropriedade"); -> Adiciona um css a um 
    elemento.

.removeAttr("nomeAtributo"); -> REMOVE o atributo.

.attr("nomeAtributo"); -> PEGA o valor do atributo.

.attr("nomeAtributo", valorAtributo); -> ATRIBUI um novo valor ao 
    atributo:
    IMPORTANTE, CASO O ATRIBUTO NÃO TENHA VALOR, COMO O DISABLED, SEU VALOR É TRUE OU FALSE.
        EXEMPLO:
        Como vimos no capítulo, para colocar o atributo disabled em um elemento, nós utilizamos a função attr. Mas como ele não recebe nenhum valor, temos que informar isso, "habilitando-o" na função, passando o valor true (verdadeiro) por parâmetro.

.one("nomeEvento", função); -> Mesma funcionalidade do .on, POREM ele só vai executar o evento APENAS UMA VEZ(ONE).

.on("nomeEvento", função); -> recebe dois parâmetros, o nome do evento a
    escutar e uma função com a ação que deve executar.

.text(); -> PEGA o conteúdo de texto do elemento, exemplo:
    var frase = $(".frase").text();
    
.text("string"); -> ATRIBUI um conteudo de texto ao elemento, exemplo:
    var frase = $(".frase");
        var texto = "alguma coisa";
            frase.text(texto);
            
A função .val() pode ser usada para pegar de elementos como <input>, <textarea> e <select>.
            
.val() -> PEGA o valor de INPUT(s)  exemplo:
    var campo = $(".campo-nome").val();
    
.val(valorQualquer); -> ATRIBUI um valor a INPUT(s) exemplo:
    $(".campo-nome").val("alguma coisa");

            
---------------------------- Evento com função Nomeada jQuery  ------------------------------

varName.on("eventName", functionName);

---------------------------- Evento com função Anônima jQuery ------------------------------

varName.on("eventName", function(event){
    
});

---------------------------- jQuery Versões ------------------------------

----- VERSÃO .min -------

A grande diferença está na minificação da versão de produção em relação a versão de desenvolvimento. Minificar é o processo de reduzir o tamanho de um arquivo fazendo certos processos como remover comentários, trocar nome de váriaveis por nomes menores, remover espaços entre outras técnicas.
A versão de produção, por ser minificada, tem um tamanho reduzido, sendo incrívelmente 30% do peso da versão de desenvolvimento. Utilizar a versão de produção quando estamos disponibilizando a versão final do nosso website para o usuário é de extrema importância, pois conseguimos onerar menos a banda de nossos usuários, algo que é bem interessante nos dias de hoje, já com o aumento dos acessos a website via mobile a maioria dos usuários depende de redes 3G e 4G, que são naturalmente mais limitadas.

Mas já ao desenvolver um website, é comum utilizarmos a versão de desenvolvimento, pois podemos ver como uma determinada função do jQuery foi implementada e fica mais fácil debuggar em caso de necessidade.

----- VERSÃO SLIM -------

A versão slim não possuí as funções de animação nem de AJAX do jQuery normal.

Por ela não possuir estes dois módulos do jQuery, ela chega a ser 20% menor do que a versão normal, onerando menos a banda do usuário quando ele acessa um site que utiliza a versão slim.

Ela é útil para desenvolvedores que querem utilizar o jQuery apenas para a manipulação do DOM, escutar eventos, adicionar ou remover classes ou criar elementos, permitindo estes desenvolvedores terem acesso a uma versão mais simples do framework, pois muitas vezes queremos fazer animações utilizando algum recurso do CSS3 ou utilizar alguma outra biblioteca específica para requisições AJAX.