******************************************************************** Web Design Responsivo ********************************************************************


-------------------------- DICAS DE UX PARA MOBILE --------------------------


---- USABILIDADE ----

Dedo do usuário -> em média 9mm(milimilimetros) é o tamanho ideal para o dedo dos usuários.

Tabela 

DEDO   PIXELS

7mm     40px -> mínimo
9mm     50px -> Recomendado
5mm     30px -> Quando não tem jeito.

É recomendado ter um padding de 2mm(10px) entre os botoes, para melhor experiência do usuário.

---- MOBILE FIRST -----

Utilizando essa tecnica, você já consegue verificar a priorização de conteudo, e ver as limitações que terá no mobile, e poder modificar para uma ideia melhor.


---- PRIORIZAÇÃO DE CONTEUDO -----

O Conteudo do site em si, deve ser enchugado e bem planejado, para que as poucas opções que tenha, já sirva para acessar todas as possibilidades do site, tanto no desk como no mobile.

---- CONTENT PARITY ----

Usar todo o conteudo do desktop, no mobile, não deixar de colocar funcionalidades no mobile só por causa que a tela é menor, tudo que estiver no desktop, é bom colocar no mobile também, mesmo que no mobile tenha que ser 2 páginas para conseguir ocupar tanta informação/funcionalidade


----------------------- SVG -----------------------

São arquivos vetoriais.

podemos criar uma imagem a partir do próprio html, usando a tag SVG e seus conceitos.

EXEMPLO:

  <svg>
    <circle cx="50" cy="50" r="50" fill="#F4D"></circle>
  </svg>
  
Nesse código SVG, criamos um circulo rosa no próprio HTML.

O grande problema do SVG é o suporte, não suporta android 2 e anteriores, e IE 8 e anteriores, o resto aceita.

Para resolver esse problema, temos que informar 2 arquivos, um PNG(PARA NAVEGADORES ANTIGOS) e um SVG(PARA NAVEGADORES NOVOS)

Solução:

<img src="logo.svg"
  onerror="this.src='logo.png'; this.onerror=null">
  
    O código acima está dizendo SE for navegador que suporta, coloca svg, se não coloque png, o onerror = null, é só para previnir, caso o PNG não encontre também, o onerror vai receber null, se não ele entraria em loop infinito tentando achar os arquivos.

-----------------------  ICON FONTS -----------------------

São icones gerados a partir de fontes de texto, isso é todo ICON FONT, pode ser tratado como um texto.

Podemos mudar a cor do icone, deixar shadow nele, aumentar/diminuir ele sem que ele perca a qualidade.

-----------------------  IMAGENS VETORIAIS ---------------------

As imagens vetoriais se ajustam conforme o tamanho, não precisando fazer uma imagem para cada tipo de resolução diferente.

Desvantagem: os desenhos vetoriais não servem para fotografias, APENAS para desenhos logotipos, gráficos etc.


----------------------- PERFORMANCE IMAGENS RESPONSIVAS ---------------------

Exemplo: tenho um slide com tamanho de 1000px.

em vez de utilizar essa mesma imagem tanto para desktop, quanto para mobile, eu utilizo a imagem de 1000px para desktop, e faço uma media query com uma imagem de tamanho reduzido para mobile, exemplo, 768px.

A idéia é sempre, minimizar os kbaites, mas sempre tentar manter a qualidade da imagem.

----------------------- IMAGENS RESPONSIVAS ---------------------

NÃO USAR FRAMEWORKS DE RETINA

---- Tipos de pixels ----

Pixel físico -> é aquele pixel do lado do monitor/tela do cliente 4k etc..

Pixel lógico -> é aquele que definimos no css.

Porque é tão importante falar sobre os tipos?
    Pq em telas de menores resoluções(telas normais), isso não faz tanta diferença,
    PORÉM em telas de alta resolução uma imagem definida com 100px lógicos no css, pode
    ficar com 200px no pixel físico(monitores/telas), pois como a resolução é maior, ele obrigatóriamente vai ter mais pixels na tela, fazendo com que a imagem que tinha 100pixels lógicos, passe a ter 200px físicos na prática, e isso faz com que a imagem estique, consequentemente faz com que perca a qualidade de imagem.
    
---- Como calcular o DPR? dos pixels ----

DPR = pixels físicos / pixels lógicos. 

Normalmente telas normais, o resultado dessa conta é 1 pra 1, telas de alta resolução podem ir de 1.5, 2, 3,4.

---- Media query imagem ---
dppx ou Dots per pixel.

@media (resolution: 1dppx){} -> Defini

Exemplo de uso:

Lembrando que o resolution segue a mesma sintax do max-width min etc.
seria no caso min-resolution, max-resolution etc.

@media (resolution: 1dppx){
    .logo{
        background-image url(logo.png); -> logo de 100px
    }
}

@media (resolution: 2dppx){
    .logo{
        background-image url(logo@2x.png); -> logo de 200px para resoluções de 2dppx pra mais.
    }
}

@media (min-resolution: 1.5dppx){ -> ja atende a MAIORIA dos dispositivos.
    .logo{
        background-image url(logo@2x.png); -> logo de 200px para resoluções de 2dppx pra mais.
    }
}
@media (min-resolution: 1.5dppx),
        (-webkit-min-device-pixel-ratio: 1.5){ -> para navegadores antigos.
    .logo{
        background-image url(logo@2x.png); -> logo de 200px para resoluções de 2dppx pra mais.
    }
}

---- RESUMO ----

- Qualidade visual

@media (min-resolution: 2dppx){
    .logo{
        background-image url(logo@2x.png); 
    }
}

- Performance

.foto{
    background-image: url(foto-pequena.jpg); -> aqui temos um kbite menor
}

@media (min-width: 600px){
    .foto{
        background-image: url(foto-grande.jpg); -> aqui temos um kbite maior.
    }
}

---- Compressive Imagens ----

Em compressive imagens, pegamos imagens de retina, abaixamos a qualidade da imagem, e aplicamos o código:

.img-retina{
    background-image: url(img-retina.jpg);
    background-size: 500px 500px;
}
@media (min-resolution: 1.5dppx){
    .img-retina{
        background-size: auto;
    }
}

--- A TAG IMG Como trata-lá? ---

Abrimos a tag picture, e dentro dela colocamos a imagem principal <img> e dentro das tags <source> colocaremos em que tamanho de tela, irá entrar certa imagem.

<picture>
  <source media="(min-width: 650px)" srcset="img_pink_flowers.jpg">
  <source media="(min-width: 465px)" srcset="img_white_flower.jpg">
  <img src="img_orange_flowers.jpg" alt="Flowers" style="width:auto;">
</picture>

--- A TAG IMG Com RETINA ---

Na tag abaixo, estou querendo dizer que, telas retina com 2dppx usa uma imagem em HD, telas sem retina(1x) use o logo normal.

<img src="logo.png" srcset="logohd.png 2x, logo.png 1x">


----------------------- Navegador Para Desenvolvedor ---------------------

--------- Google Chrome Canary ---------

https://www.google.com.br/chrome/browser/canary.html

----------------------- COMO DEBUGAR O SITE? ---------------------

Através de:

- Ferramenta do desenvolvedor no Chrome(ou qualquer outro de preferencia).
- Emuladores.
- O próprio dispositivo.

----------------------- VIEWPORT ---------------------

meta tag utilizada para adaptar o layout ha dispositivos mobile.

	<meta name="viewport" content="width=device-width"> -> compatível com android
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> -> compatível com todos os dispositivos. o initial-scale=1.0 foi acrescentado para corrigir o bug quando rotaciona nos dispositivos IOS

----------------------- CSS3 Media Querys ---------------------

IMPORTANTE: Definir determinadas media querys, nós chamamos isso de BREAK POINTS de CONTEÚDO, isso é, em determinado ponto do nosso layout nós precisamos fazer essa quebra para ajustar o layout.

@media (resolution: 1dppx){
    //define uma imagem.
} -> usamos resolution para ajustar as imagens para telas de maior resolução.

@media not all and (max-width: 600px) <- NEGAÇÃO, estou ignorando tudo 
    que tenha até 600px, isso é, vou aplicar o css apenas acima de 600px

@media screen and (min-width: 400px) <- TELAS(screen) acima de 400px.

@media impressao and (min-width: 400px) <- impressao(print) acima de
    400px.

@media only screen and (min-width: 400px) <- ONLY da suporte a
    navegadores antigos que
    não entendem a sintax mais nova.

--- Diferentes parâmetros e seus significados ---

(min-width: 400px) -> pega telas DE 400px para cima.

(max-width: 400px) -> pega telas ATÉ 400px

(width: 400px) -> pega telas que tem EXATAMENTE 400px.

(height: 400px) -> (min-height: 400px) -> (max-height: 400px) -> os 3 seguem o mesmo conceito do exemplo acima.

(device-width: 400px) -> (device-height: 400px) -> ambos pegam a tela física toda, e
    não a tela do navegador.

(orientation: portrait) -> quando o dispositivo estiver no modo RETRATO.

(orientation: landscape) -> quando o dispositivo estiver no modo PAISAGEM.


----------------------- CSS2 Media Querys ---------------------

@media screen {} <- screen significa TELAS.

@media print {} <- print significa impressão.

----------------------- Como calcular a porcentagem? ---------------------

SINTAX: (pixel-almejado)*100/(tamanho-font-do-elemento-pai) = resultado.

É simples, faça a regra de 3.

EXEMPLO:
<body> -> 16px
    <main> -> font-size: 125%; do pai(body) é 20px.

fonte definida no body -> 16px

no main você quer uma fonte de 20px, então a conta a ser feita é 20*100/16 = 125%.

então, em um layout responsivo, coloque font-size 125%, caso queira uma fonta de 20px, baseado no elemento PAI de 16px.

----------------------- Como calcular EM? ---------------------

Calculamos os pixels que queremos e também aplicamos a regra de 3.

EXEMPLO:
<body> -> 16px
    <main> -> font-size: 1.25em; do pai(body) é 20px.
    
Como que eu sei que da 20px 1.25em?
Simples.
Primeiro eu defino o pixel que eu almejo em determinado elemento, exemplo, quero 20px no elemento main.
então aplico a regra de tres, sabendo que meu elemento pai(O BODY) é 16px, eu faço a seguinte conta:
20*100/16 = 125% -> 20 de 20px multiplico por 100 e divido por 16 de 16px.
Sabendo que o resultado deu 125%, traduzindo isso para EM ficaria assim: 125% é = a 1.25em;

mais exemplos:

202.5% = 2.025em;
100% = 1em;
90% = .9em;
10% = .1em;

E assim por diante.

---- Como converter EM em pixel? ----

SINTAX: (porcentagem)%*(font-do-elemento-pai) = resultado.

EXEMPLO:
    Font-elemento-pai(body no caso): 16px;
    Alvo: 2.5em; = 250%;
    CALCULO: 250%*16 = 24px;


----------------------- Calculo usado para porcentagens em fontes. ---------------------

<body> -> < se não definido o padrão é 16px
    <main> -> font-size: 125%; do pai(body) é 20px.
        <p>
        <section> -> font-size: 90%; -> 90% de MAIN(seu pai) = 18px.
            <h1> -> font-size: 150%; -> 150% de SECTION(seu pai) = 27px
            <p> -> 22px
            <p> -> 22px


******************************************************************** PHP ********************************************************************

---------------------------- BANCO DE DADOS PHP ------------------------------


----CONEXAO---
$con = mysqli_connect($host,$user,$pass,$db_name); -> Cria a conexao com o
    banco de dados.

$query = "insert into produtos(nome, preco) values ('{$nome}',{$valor})"; 
    -> cria a query desejada.

----EXECUÇÃO DE QUERYS----
mysqli_query($con, $query) -> recebe o banco e a query, e a executa, se
    ocorrer tudo bem, irá ter o retorno TRUE.

-----EXIBIÇÃO DE ERROS----
mysqli_error($con) -> exibe a mensagem de erro.



mysqli_fetch_assoc($resultadoDaExucucaoDaQuery) -> Obtenha uma linha de
    resultados como um array associativo.
        EXEMPLO:
            $resultado = mysqli_query($con,"select * from produtos");
            while($produto = mysqli_fetch_assoc($resultado)){}
            
----------------------------  HEADER LOCATION PHP ------------------------------

header("Location: uri); -> Redireciona para a uri colocada.

die(); -> Finaliza o script, SEMPRE que utilizar header location, coloque 
    die(); após isso.
        EXEMPLO:
            header("Location: produto-lista.php");
                die();

---------------------------- Funções PHP ------------------------------

Criando uma função:
    function functionName($param){
        //conteudo...
    }
    
 $resultSoma = soma(70,55); - > variável recebendo valor da função.
        function soma($a,$b){
            $result = $a + $b;
            return $result;
        }

count($array) -> retorna o numero de elementos que a variável (ou array) 
    tem.
    
sizeof($array) -> retorna o tamanho da variavel(ou array).

array_push($nomeArray, $valorASerColocadoNoArray);

array_key_exists(key, array) -> verifica se uma chave existe dentro do
    array.
        EXEMPLO:
            array_key_exists("removido", $_GET) , estou perguntando se a chave "removido" contem dentro do array $_GET isso é, to perguntando se existe isso $_GET["removido"];.


---------------------------- TAGS ------------------------------

Se um arquivo for código PHP puro, é preferível omitir a tag de fechamento no final do arquivo. Prevenindo a existência de espaços ou linhas em branco após a tag, que podem causar efeitos indesejáveis.
    EXEMPLO:
        <?php
            echo "Hello world";

            // ... mais código

            echo "última instrução";

            // o script termina aqui, sem tag de fechamento PHP
            
<?php ?> -> Tag normal.

<?= ?> -> shot tag, é a mesma coisa que <?php echo   ; ?>.
    só funciona com o short_open_tag está ativo no arquivo
    php.ini.
        NOTA: 5.4.0	A tag <?= sempre está disponível, independente do da configuração short_open_tag ini.
            EXEMPLO:
                <?= $nome; ?>

******************************************************************** jQuery ********************************************************************

---------------------------- AJAX jQuery ------------------------------

Pegando informações do servidor via get com jQuery.
Documentação: https://api.jquery.com/jquery.get/

$.get("url", função(parâmetro)); -> 
    1° Como primeiro parâmetro passamos a url que desejamos consumir via
    Ajax.
    2° Como segundo parâmetro passamos uma função com um parâmetro, esse parâmetro é quem vai receber os dados que foram puxados do servidor, e é com esse parâmetro que teremos acesso as informações do servidor.
    EXEMPLO PRÁTICO:
        function fraseAleatoria() {

            $.get('http://localhost:3000/frases', function(retorno) {

                console.log(retorno[0].texto);
            });
        }
EXIBINDO ERROS AJAX

.fail(function) -> Se a requisição falhar, executa esta função.(.fail()).
    EXEMPLO:
        function fraseAleatoria(){ 
            $.get("http://localhost:3000/frases", trocaFraseAleatoria)
            .fail(function(){
                $("#erro").toggle();
                setTimeout(function(){
                    $("#erro").toggle();
                }, 5000);
            });
        }

.always() -> Se a requisição tiver sucesso ou fracasso, esta função 
    executará mesmo assim.
        EXEMPLO:
            function fraseAleatoria(){
                var spinner = $("#spinner"), erro = $("#erro");
                spinner.toggle();
                $.get("http://localhost:3000/fraases", trocaFraseAleatoria)
                .fail(function(){
                    erro.slideDown();
                    setTimeout(function(){
                        erro.slideUp();
                    },5000);
                })
                .always(function(){
                    spinner.toggle();
                });
            }

--------------- Buscando dados com get AJAX ---------------


var fraseId = $("#frase-id").val(); -> pegamos o id do campo.
var dados = {id: fraseId}; -> colocamos o valor desse campo, na propriedade
    desejada, no caso queremos o id.
$.get("http://localhost:3000/frases", dados, trocaFrase); -> passamos o 
    objeto dados como 2° Parâmetro( IMPORTANTE, TEM QUE SER COMO SEGUNDO PARÂMETRO), e depois passamos a função que irá retornar o objeto buscado, para nós.
        EXEMPLO 1: $.get("http://localhost:3000/frases", dados, function(data){
            console.log(data);
        });
        EXEMPLO 2:
            function buscaFrase(){
                var fraseId = $("#frase-id").val();
                var dados = {id: fraseId};
                console.log("id escolhido foi:" +fraseId);
                $.get("http://localhost:3000/frases", dados, trocaFrase);
            }
            
            function trocaFrase(data){
                $(".frase").text(data.texto);
                atualizaTempoInicial(data.tempo);
                atualizaTamanhoFrase();
            }

---------------------------- Eventos jQuery ------------------------------

SINTAX: variavel.on("nomeEvento", função{
    //conteudo da função
});

campo.on("click",function(){
    console.log("Campo clicado");
});

IMPORTANTE!
Alguns evento no jQuery tem atalhos para eventos comuns, como click focus blur, o atalho seria o seguinte:

campo.click(function(){
    console.log("Campo clicado");
});

-------------- Eventos jQuery --------------

ready -> assim que a pagina carrega, o evento é disparádo, diferente do
    onload do javascript puro, que ele necessita que tudo da página seja carregado para disparar o evento(videos imagens tudo).
        exemplo:
            $(document).ready(function(){
                atualizaTamanhoFrase();
                iniciaContadores();
                iniciaCronometro();
                $("#botao-reiniciar").click(reiniciaJogo);
            });
            
ATALHO PARA ready:

    $(function(){
        atualizaTamanhoFrase();
        iniciaContadores();
        iniciaCronometro();
        $("#botao-reiniciar").click(reiniciaJogo);
    });



---------------------------- Função Seletora jQuery ------------------------------

A função seletora aceita como parâmetro seletores CSS.

var frase = jQuery(".frase");
    OU o famoso dolar, que é a mesma coisa, só é um atalho que faz referência ao seletor jQuery
        var frase = $(".frase");
        
---------------------------- Funções jQuery ANIMATION------------------------------

scrollTop:

x.animate({objeto: algo}, tempoParaAnimacao); -> cria animações customizadas, 
    EXEMPLO:
        function scrollPlacar() {
            var posicaoPlacar = $(".placar").offset().top;

            $("html, body").animate({
                scrollTop: posicaoPlacar+"px"
            }, 1000);
        }
    RESULTADO:
        pega o html e body, para ter referência do tamanho da página,
        depois vai scrollar até a posição do placar.

x.offset().top -> retorna a posição do TOP do elemento.

x.offset().left -> retorna a posição do LEFT do elemento.

x.offset() -> retorna a posição do elemento (top e left do elemento).

x.top() -> para a animação que estiver acontecendo no momento.

x.fadeTo("milissegundos",opacidade de 0 a 1) -> Faz uma animação diminuindo a 
    opacidade do elemento.

x.fadeToggle("millisegundos") -> aparece ou desaparece com o tempo.

x.fadeIn("millisegundos"); -> o elemento vai aparecendo ao longo do tempo.

x.fadeOut("millisegundos"); -> o elemento vai desaparecendo ao longo do tempo.


x.slideToggle("milisegundos") -> faz uma animação para cima se tiver para 
    baixo, e para baixo se tiver para cima.

x.slideUp("milisegundos") -> faz uma animação para CIMA.

x.slideDown("milisegundos") -> faz uma animação para BAIXO.

x.toggle(); -> se tiver escondido ele mostra, se não tiver ele esconde.

x.hide(); -> esconde o elemento.

x.show(); -> exibe o elemento.
      
---------------------------- Funções jQuery ------------------------------

x.each -> Funciona como o forEach e for normal.
    EXEMPLO:
    linhas.each(function(){
        var usuario = $(this).find("td:nth-child(1)").text();
        console.log(usuario);
    });
    EXEMPLO 2:
        var letras = ['a', 'b', 'c'];

        $.each(letras, function() {

             console.log(this);
        });
    
x.is(":visible"); -> O jQuery possui a função is que permite consultar uma  
    pseudo class. Toda vez que um elemento esta com display diferente de none ele ganha a pseudo classe :visible . A função is retorna true caso o elemento esteja visível. Se ele estiver visível, precisamos escondê-lo e isso é feito através da função hide. Para exibir o elemento, é usada a função show.

x.hasClass("nomeClasse") -> retorna true se o elemento possui a classe,
    e false se não possuir.
        EXEMPLO DE UTILIZAÇÃO:        
            $('#botao-promocao').click(function() {

              var promocoes = $('.promocoes');
              if(promocoes.hasClass('invisivel')) {

                promocoes.removeClass('invisivel');
              } else {
                promocoes.addClass('invisivel');
              }

            });

var x = $("<tagHTML>"); -> cria um elemento html.
    EXEMPLO:
        var linha  = $("<tr>"); -> CRIA um elemento TR.

elemento.parent("seletor") -> Pega o elemento e procura por um pai com o mesmo nome do seletor colocado como parâmeto:
    EXEMPLO:
        HTML:
            <section>
                <div>
                    <h1>Olá</h1>
                </div>
                <div class="segunda"> <-- retorna apenas esta div.
                    <h1>Mundo</h1>
                </div>
            </section>
        JQUERY:
            $("h1").parent(".segunda");
        RESULTADO:
            O código $("h1").parent(".segunda"); seleciona todos os h1s da página, e busca em cada um deles por um pai com a classe segunda. Neste caso, retornando apenas a div inferior.

elemento.parent().parent(); -> acessa o pai do pai do elemento, e assim por diante.
    EXEMPLO:
este é o pai do td-><tr> <- .parent().parent(), acessa aqui (o pai do <tr>)
                        <td>Nicolas</td>
                        <td>1</td>
este é o pai do a  ---> <td>   <--- .parent(), acessa aqui ( o pai do <a>)
este é o elemento --->      <a href="#" class="btn-remove"><i class="small
                            material-icons">delete</i></a>
                        </td>
                    </tr>
    JQUERY:
         $(".btn-remove").click(function(event){
            event.preventDefault();
            $(this).parent().parent().remove();
        });
    

elemento.parent(); -> acessa o pai do elemento.
    EXEMPLO:
        HTML: 
            <div>
                sou uma div
                <p>Olá</p>
            </div>
        jQuery:
            $("p").parent().css({"color": "red", "border": "2px solid red"});
        Resultado:
            A <div> que é o PAI do <p> fica estilizada com cor red e borda red.

elemento.prepend("string") -> adiciona uma string no COMEÇO do elemento 
    selecionado, SEMPRE COMO FILHO do elemento.

elemento.append("string") -> adiciona uma string no FINAL do elemento 
    selecionado, SEMPRE COMO FILHO do elemento.
        EXEMPLO:
            function inserePlacar(){
                var corpoTabela = $(".placar").find("tbody");
                var usuario = "Nicolas";
                var numPalavras = $("#contador-palavras").text();
    string -->  var linha = "<tr>"+
                                "<td>"+usuario+"</td>"+
                                "<td>"+numPalavras+"</td>"+
                            "</tr>";
                corpoTabela.append(linha);
            }

.find() -> Obtenha os descendentes de cada elemento no conjunto atual de
    elementos correspondentes, filtrados por um seletor, objeto jQuery ou elemento, exemplo:
        HTML:
            <section class="placar">
            <h3 class="center">Placar</h3>
            <table class="centered bordered">
        jQuery:
            var placar = $(".placar").find("table");
            console.log(placar);
        Resultado:
            [table.centered.bordered, prevObject: jQuery.fn.init(1)]


.toggleClass("nomeClasse", false); //sempre retira

.toggleClass("nomeClasse", true); //sempre adiciona

.toggleClass("nomeClasse") -> Adiciona OU Remove uma ou MAIS classes, se 
    já existir a classe, ele remove, se não existir, ele adiciona.

.removeClass("nomeClasse"); -> Remove uma classe de um elemento.

.addClass("nomeClasse"); -> Adiciona uma classe ao elemento.

Devemos usar a função css() do jQuery que recebe o nome da propriedade:
    var x = elemento.css("background-color"); -> RECEBE a cor do elemento selecionado.

        Também é possivel recuperar mais de um valor passando um array de propriedades, por exemplo:
            var valores = $("div").css(["background-color","width"]);

                O resultado é um objeto que possui todos os valores. Por exemplo para acessar o width podemos escrever:
                    valores.width


.css("nomePropriedade", "valorPropriedade"); -> Adiciona um css a um 
    elemento.

.removeAttr("nomeAtributo"); -> REMOVE o atributo.

.attr("nomeAtributo"); -> PEGA o valor do atributo.

.attr("nomeAtributo", valorAtributo); -> ATRIBUI um novo valor ao 
    atributo:
    IMPORTANTE, CASO O ATRIBUTO NÃO TENHA VALOR, COMO O DISABLED, SEU VALOR É TRUE OU FALSE.
        EXEMPLO:
        Como vimos no capítulo, para colocar o atributo disabled em um elemento, nós utilizamos a função attr. Mas como ele não recebe nenhum valor, temos que informar isso, "habilitando-o" na função, passando o valor true (verdadeiro) por parâmetro.

.one("nomeEvento", função); -> Mesma funcionalidade do .on, POREM ele só vai executar o evento APENAS UMA VEZ(ONE).

.on("nomeEvento", função); -> recebe dois parâmetros, o nome do evento a
    escutar e uma função com a ação que deve executar.

.text(); -> PEGA o conteúdo de texto do elemento, exemplo:
    var frase = $(".frase").text();
    
.text("string"); -> ATRIBUI um conteudo de texto ao elemento, exemplo:
    var frase = $(".frase");
        var texto = "alguma coisa";
            frase.text(texto);
            
A função .val() pode ser usada para pegar de elementos como <input>, <textarea> e <select>.
            
.val() -> PEGA o valor de INPUT(s)  exemplo:
    var campo = $(".campo-nome").val();
    
.val(valorQualquer); -> ATRIBUI um valor a INPUT(s) exemplo:
    $(".campo-nome").val("alguma coisa");

            
---------------------------- Evento com função Nomeada jQuery  ------------------------------

varName.on("eventName", functionName);

---------------------------- Evento com função Anônima jQuery ------------------------------

varName.on("eventName", function(event){
    
});

---------------------------- jQuery Versões ------------------------------

----- VERSÃO .min -------

A grande diferença está na minificação da versão de produção em relação a versão de desenvolvimento. Minificar é o processo de reduzir o tamanho de um arquivo fazendo certos processos como remover comentários, trocar nome de váriaveis por nomes menores, remover espaços entre outras técnicas.
A versão de produção, por ser minificada, tem um tamanho reduzido, sendo incrívelmente 30% do peso da versão de desenvolvimento. Utilizar a versão de produção quando estamos disponibilizando a versão final do nosso website para o usuário é de extrema importância, pois conseguimos onerar menos a banda de nossos usuários, algo que é bem interessante nos dias de hoje, já com o aumento dos acessos a website via mobile a maioria dos usuários depende de redes 3G e 4G, que são naturalmente mais limitadas.

Mas já ao desenvolver um website, é comum utilizarmos a versão de desenvolvimento, pois podemos ver como uma determinada função do jQuery foi implementada e fica mais fácil debuggar em caso de necessidade.

----- VERSÃO SLIM -------

A versão slim não possuí as funções de animação nem de AJAX do jQuery normal.

Por ela não possuir estes dois módulos do jQuery, ela chega a ser 20% menor do que a versão normal, onerando menos a banda do usuário quando ele acessa um site que utiliza a versão slim.

Ela é útil para desenvolvedores que querem utilizar o jQuery apenas para a manipulação do DOM, escutar eventos, adicionar ou remover classes ou criar elementos, permitindo estes desenvolvedores terem acesso a uma versão mais simples do framework, pois muitas vezes queremos fazer animações utilizando algum recurso do CSS3 ou utilizar alguma outra biblioteca específica para requisições AJAX.


******************************************************************** JavaScript ****************************************************************

document -> é o DOM da página, se colocarmos somente document dentro de um console.log(document); aparecera todo o conteudo da página.

---------------------------- JSON JS ------------------------------
JSON.parse(respostaServidor'string') -> converte o banco de dados que estava em formato de string para o formato em que o JavaScript possa trabalhar, EXEMPLO:

//tras a resposta do texto que foi requisitado ao servidor.
var resposta = xhr.responseText;
//Com o JSON eu converto a string em objeto JavaScript.
var objPacientes = JSON.parse(resposta);


---------------------------- AJAX JS ------------------------------

var xhtml = new XMLHttpRequest(); -> Um objeto responsavel por fazer Requisições HTTP, XML? sim, ele costumava fazer o transporte de dados do tipo XML, mas hoje em dia ele consegue trafegar outros tipos de dados também, como texto e outras coisas.

xhtml.open("TipoDaRequisição(get,post,etc)", "url(endereço que queremos)"); -> abre a conexão, com o endereço que a gente quer.
    No caso do TipoDaRequisição, será GET, pois quero passar uma url.

xhtml.send(); -> pega a requisição criada(xhtml.open), e envia a requisição para a url.

//após abrir a conexao e enviá-la, devemos pedir para o xhtml, ao carregar, se conseguio receber os dados pedidos xhtml.responseText (A resposta do texto).
xhtml.addEventListener("load", function(){
        //tras a resposta do texto que foi requisitado ao servidor.
        console.log(xhr.responseText);
    });

xhtml.status -> verifica o retorno do url requisitada, se o retorno for == 200 quer dizer que tudo ocorreu bem, se o erro for 404, significa que a página não foi encontrada, enfim, o xhtml.status retorna o tipo de status se foi erro se não foi etc.
---------------------------- ARVORE NODE ------------------------------

x.appendChild(); -> NODE significa COLOQUE COMO FILHO
x.parentNode -> NODE significa que estou SELECIONANDO o PAI do elemento SELECIONADO(x).



---------------------------- PALAVRAS RESERVADAS JS ------------------------------

this -> em javascript o this se refere ao dono do evento referido naquele momento, EXEMPLO:

pacientes.forEach(function(paciente){
    paciente.addEventListener("dblclick", function(){
        this.remove();
    });
});

---------------------------- METODOS/FUNÇÕES JAVASCRIPT / Document ----------------------------

Junção dos dois metodos de Math(Math.floor() + Math.random()).
    EXEMPLO:
        Math.floor((Math.random() * 10) + 1);
    RESULTADO:
        Vai gerar um numero aleatório de 1 até 10.

Math.floor(1.6); -> Arredonda o numero para baixo.
        EXEMPLO:
            Math.floor(1.9);
        RESULTADO:  
            1

Math.random(); -> Gera um numero aleatório 0.XXXXXXXXXXX de 0 até, 
    0.999999...(não inclui o 1).        

querySelector("SEU SELETOR CSS AQUI"); -> A função querySelector faz a busca através de seletores CSS para trazer o HTML que você está interessado.(IMPORTANTE, essa função retorna APENAS 1 ELEMENTO(mesmo que esse elemento tenha varias classes, ele retorna apenas o primeiro)).

querySelectorAll -> ao contrario da querySelector, que seleciona apenas 1 elemento, a querySelectorAll, seleciona todos os elementos ele é um VETOR.

x.textContent -> pega o conteudo do texto.

x.toFixed(2) -> limita o numero a duas casas decimais.

x.addEventListener("nomeEvento", funçãoAqui); -> Adiciona um escutador de evento, seja de click do mouse de rolagem enfim.

x.appendChild(); -> NODE significa COLOQUE COMO FILHO

document.createElement("nomeElemento") -> Cria um elemento.
Exemplo:

 var form = document.querySelector("#form-adiciona");
        
        var nome = form.nome.value;
        var peso = form.peso.value;
        var altura = form.altura.value;
        var gordura = form.gordura.value;
        
        /* Aqui eu estou criando o elemento PAI(TR) e seus Futuros FILHOS(TD) */
        var pacienteTr = document.createElement("tr");
        var nomeTd = document.createElement("td");
        var pesoTd = document.createElement("td");
        var alturaTd = document.createElement("td");
        var gorduraTd = document.createElement("td");
        var imcTd = document.createElement("td");
        
        /* Estou dando valor para as TD'S */
        nomeTd.textContent = nome;
        pesoTd.textContent = peso;
        alturaTd.textContent = altura;
        gorduraTd.textContent = gordura;
        
        /* Aqui eu faço o futuro virar realidade, e falo pro JS, Coloque como filho do pacienteTr(PAI) todos os meus TDS*/
        pacienteTr.appendChild(nomeTd);
        pacienteTr.appendChild(pesoTd);
        pacienteTr.appendChild(alturaTd);
        pacienteTr.appendChild(gorduraTd);
        
        
x.remove(); -> remove o elemento selecionado.

x.tagName -> retornará o nome da tag selecionada em MAIÚCCULO, exemplo:

 execute document.querySelector('h1').tagName. O console te retornará o nome da tag do elemento em maiúsculo ("H1").
 
.toLowerCase(); -> deixa todas as letras minúsculas.

string.substr(numMinimo, numMaximo); -> verifica a string entre o numero x e y, exemplo:

var string = "Alura";
var resultado = string.substr(1, 4);

// lura

setInterval(nomeFuncao, tempoDeIntervalo); -> 
    Executa uma função de tanto em tanto tempo, até você definir 
    quando parar o intervalo com o clearInterval(id);
    
clearInterval(id); -> Limpa o intervalo da função setInterval
    isto é, ele para o funcionamento da mesma.
        exemplo:
            var id = setInterval(function(){
                //faz algo.
                if(esse algo chegar ao objetivo)
                    clearInterval(id); -> para o funcionamento do 
                        setInterval
            }, 1000); -> faz algo a cada 1000 milisegundos(1segundo);

Caso queria uma função que só execute UMA vez em determinado tempo, utilizamos o setTimeout, que segue quase a mesma lógica da explicação acima, porem não necessita de clearInterval, pois executará apenas uma vez.

setTimeout(nomeFuncao, tempoDeIntervalo); -> Executa uma única vez a
    a função definida, no tempo definido.
    
---------------------------- PROPRIEDADES JS ------------------------------


Não, innerHTML é uma propriedade, não uma função, então ela recebe o novo conteúdo, ou seja, utilizamos um sinal de igual (=):
document.querySelector("#alura").innerHTML = "Novo texto"

x.innerHTML -> Edita o html INTERNO de determinado elemento, exemplo:

Temos uma ul com varias li's

<ul class=".msg-erro-ul">
    <li>bla bla</li>
    <li>bla bla</li>
</ul>

var ul = document.querySelector(".msg-erro-ul");
ul.innerHTML = "";

Quando eu dou o valor em branco para meu ul, ul.innerHTML = "";, TODO o conteúdo dele será limpado.

Ficará assim 

<ul class=".msg-erro-ul">
</ul>

Utilizamos innerHTML quando queremos EDITAR alguma coisa.


---------------------------- JavaScript CSS ----------------------------

x.style.nomepropriedade = x.style.color, OBS: CASO
A PROPRIEDADE TENHA O TRACINHO - em JS nós retiramos o tracinho e deixamos o nome da propriedade em camelCase, Exemplo: x.style.backgroundColor = "red";

x.classList -> Retorna um VETOR com todas as classes do cara selecionado.
x.classList.add("nomeClasse"); -> Adiciona uma nova classe.
x.classList.remove("nomeClasse"); -> Remove a classe.

DENTRO DA classList temos o metodo .add("nomeclasse"); SEM O PONTO DA CLASSE, Pois o metodo já se refere a uma classe, que basicamente, pega o vetor de classes da classList e adiciona uma nova classe a ela.

---------------------------- Tipos de funções ----------------------------
Temos as funções nomeadas, que podemos reutilizar elas.

function nameFunction(){
}

E temos as funções anônimas, que normalmente se usa em casos específicos, que preferencialmente não se repitão novamente.

function(){}

---------------------------- Tipos de for --------------------------------


Temos o for normal.

    for(var i = 0; i < variavel.lenght; i++){
    }
    
Temos o forEach que pega um vetor e percorre ele como se fosse um for normal.

function exibeMsgErro(erros){ -> recebendo meu vetor de erros.
     var ul = document.querySelector(".msg-erro-ul"); -> selecionando a ul
    erros.forEach(function(erro){ -> criando um forEach e dizendo para cada item do meu vetor, faça algo, o parâmetro que eu passo na função, corresponde ao meu vetor erros.
    
    // E aqui eu crio uma li, adiciono conteudo a ela e uma classe, depois adiciono ela dentro da ul existente.
        var li = document.createElement("li");
        li.textContent = erro;
        li.classList.add("msg-erro");
        ul.appendChild(li);
    });
}


---------------------------- Javascript Formulário ----------------------------

var btnAdd =  document.querySelector("#adicionar-paciente");

btnAdd.addEventListener("click", function(event){
    event.preventDefalt();
    
var form = document.querySelector("seletorForm");

var nome = form.nome.value; -> Pega o valor do nome do formulário.

var peso = form.peso.value -> Pega o valor do peso do formulário.

});

form.reset(); -> limpa os dados dos campos.

---------------------------- Funções nomeadas ----------------------------

function nomeFunction(){
    alert("Oi");
}

Vantagens, caso essa função se repita mais de uma vez, é mais vantajoso fazer uma função nomeada, para poder fazer o reaproveitamento de código, Exemplo:

x.addEventListener("click", nomeFunction); -> ja executará a mensagem. 

---------------------------- Funções Anônimas ----------------------------

Creio que são feitas quando não é necessário a aparição da mesma mais de uma vez.

x.addEventListener("click", function(){ 
    alert("Ola"); 
});

---------------------------- EVENTOS JavaScript ----------------------------

IMPORTANTE!

Ele sabe que todo elemento de entrada, isto é, que recebe entrada do usuário possui a propriedade value enquanto elementos que exibem informações apenas possuem a propriedade textContent como é o caso da nossa tag span.

Previnir comportamento padrão de um evento( o botão por exemplo tem o comportamento padrão de recarregar a página ).

function(event){
    event.preventDefault();
}

no código acima, eu quero dizer para o evento, não fazer o seu comportamento padrão.

event.preventDefault(); -> previne o comportamento padrão.

event.target -> escuta e traz o evento selecionado.

click -> Ao clicar faz algo.
dblclick -> Ao clicar duas vezes faz algo.
input -> Toda vez que recebe um digito ou tira faz algo.
load -> Toda vez que a página é carregada TOTALMENTE, faz algo.
ready -> Função EXCLUSIVA do jQuery
    Assim que a página é carregada ele já executa a função, não precisa esperar imagens/videos/etc ser carregado também como é no evento de load do javascript puro.
focus -> Toda vez que um campo ganha o foco para ser digitado.

mouseenter -> Toda vez que o mouse passa em cima, ele ativa o evento.

mouseleave -> Toda vez que o mouse sai do elemento, ele ativa o evento.

---------------------------- REGEX Regular Expressions ----------------------------


Toda linguagem de programação tem um Regex Engine, ele consiste em, receber um target(alvo) e um regex(pattern/padrão), dito isso tudo, ele é usado para obter o match(resultado).

var expressao = new RegExp(target, regex);



Construtor  Regex

/padrão/flags
new RegExp(padrão[, flags])

var expressao = new RegExp(busca, "i");
    //se a busca não tiver algum dado que bate com a expressao,
    //remove o paciente
    if(!expressao.test(nomePaciente))
        paciente.classList.add("invisivel");





SINTAX -> var nomeVariavel = / EXPRESSAO /

---------------------------- REGEX META-CHARS ----------------------------



\s -> Caracter de espaço em branco.
\d -> Qualquer dígito numérico. ex 3465987980
\D -> Tudo que não é um digito (negação de \d) [^\d]

\s -> significa whitespace e é um atalho para [ \t\r\n\f].
\w -> significa word char e é uma atalho para [A-Za-z0-9_].
\W -> Tudo que não é um wordchar (negação de word-char) [^\w]


Lembrando também, se quisermos procurar pelo * ou . literalmente (sem significado especial), devemos utilizar o caractere \ exemplo: \. ou \* 

---------------------------- REGEX Quantificadores ----------------------------

? -> 0 ou 1 vez.
* -> 0 ou mais vezes.
+ -> 1 ou mais vezes.
{n} -> exatamente n vezes.
{n,} -> no mínimo n vezes.
{n,m} -> no minimo n vezes, no máximo m vezes.
?=n	Matches any string that is followed by a specific string n
?!n	Matches any string that is not followed by a specific string n

---------------------------- REGEX Classes de char - [] ----------------------------
[] -> Define uma classe de caracteres que podem aparecer naquela posição.
        OBS: Apenas os caracteres \ (barra invertida), - (hífen) e ^
            (circunflexo) realmente são meta-chars dentro de uma classe.
    
() -> Define grupos.
(([A-Za-z\d]+)\.)+ -> Aqui eu quero dizer o seguinte, letras e numeros podem aparecer uma ou mais vezes, ISOLO com 
                      grupo ([A-Za-z\d]+) para dizer que apenas esses eu quero que apareça uma ou mais vezes, após isso eu defino que o .(ponto) deve aparecer uma vez, e englobo TODA a regex e falo, essa regra pode acontecer uma ou mais vezes, resultados validos:
                      ALgO57. ALgO57. ALgO57.ALgO57.asdas
                      
(?:de\s+) -> O ?: Non-capturing group, você agrupa as informações
             que não deseja entre (), exemplo, (de\s+), e coloca o
             ?: para dizer para sua programação, que não deseja essa informação.
             Exemplo:
             ALVO: 21 de Maio de 1993
             REGEX: ([1-3]?\d)\s+(?:de\s+)?([A-Z][a-zç]{3,8})\s+(?:de\s+)?(\d{4})
             RESULTADO do ?: para a aplicação: 21 Maio 1993
             Resumindo, o ?: juntamente com o grupo (?:) é útil para filtrar apenas as informações que queremos NA APLICAÇÃO.
| -> para definir dentro de um grupo que queremos um OU outro usamos o caractere | (pipe) exemplo: (caelum.com.br | alura.com.br)
             
             
[A-Z] -> Letras de A até Z.
[123] -> 1,2 ou 3.



-------------------------------- REGEX Âncora ------------------------------

     IMPORTANTE: Âncoras marcam uma posição específica no alvo, por isso não é possível combiná-las com um quantifier.

\b -> Âncora, seleciona tudo que não contem 
      wordchar(\w ([A-Za-z0-9_])) seja no inicio, no final ou em ambos os lados da palavra buscada, depende de onde nossa âncora esteja.
      exemplo:
      ALVO: dialogo dia melodia diafragma dialeto radial bom-dia
      REGEX: 1° busca: \bdia  2° busca: dia\b    3° busca: \bdia\b
      RESULTADO: 1°busca: dialogo dia diafragma dialeto bom-dia
                 2°busca:  dia melodia bom-dia
                 3°busca:  dia bom-dia
                 
\B -> Âncora, é o inverso do \b ele extrai palavras internas como o único
      que não foi extraido do exemplo acima, radial 

^ -> A string deve iniciar com o padrão. /^oi/ -> oi deve aparecer no inicio da string

$ -> A string deve terminar com o padrão. /cat$/ -> cart deve aparecer no final da string

-------------------------------- REGEX GRUPOS ------------------------------

(\w+) -> grupo de wordchars
(\w+)? -> grupo opcional
(?:\w+) -> non-capturing group

Ganancioso ou preguiçoso

--------------------- REGEX Ganancioso ou preguiçoso -----------------------

Nosso meta-char +, * e {} são gananciosos, nessa regex ele não nos obedece:
    ALVO: <h1 class="text-left">Expressões regulares</h1>
    REGEX: <h1.+>
    RESULTADO: <h1 class="text-left">Expressões regulares</h1>
    Éra para ele parar aqui <h1 class="text-left">, porém o + é ganancioso, ele seleciona tudo pela frente e só para no último > do nosso alvo, e as vezes não é isso que desejamos, para corrigir isso, temos que fazer o meta-char + ficar PREGUIÇOSO colocamos uma ?(INTERROGAÇÃO) logo a frente dele, dará outro significado a interrogação, elá falará para o nosso + parar no PRIMEIRO sinal de maior que achar, o resultado agora é outro:
    
    ALVO: <h1 class="text-left">Expressões regulares</h1>
    REGEX: <h1.+?>
    RESULTADO: <h1 class="text-left">
    
Meta-char ganancioso {}
    ALVO: <h1 class="text-left">Expressões regulares</h1>
    REGEX: <h1.{1,10}
    RESULTADO: <h1 class="te
    RESUMO: Selecionou os 10.
    
Meta-char preguiçoso {}
    ALVO: <h1 class="text-left">Expressões regulares</h1>
    REGEX: <h1.{1,50}?
    RESULTADO: <h1 
    RESUMO: Selecionou apenas 1, pois não defini o que vai depois dele.
    
Meta-char preguiçoso {}
    ALVO: <h1 class="text-left">Expressões regulares</h1>
    REGEX: <h1.{1,50}?>
    RESULTADO: <h1 class="text-left">
    RESUMO: Agora ele seleciona apenas até aonde eu preciso, não utiliza os 50, apenas o necessario para chegar no >

    


---------------------------- Regex Backreference ---------------------------

um backreference, referencia algum grupo anterior, nós referênciamos grupos pelo seu indice, exemplo:
    ALVO: <h1 class="text-left">Expressões regulares</h1>
    REGEX ERRADO: <(h1|h2).+?>([\s\wõãí]+)</(h1|h2)>
        Ao utilizar pipe ( | ), ele pega ou um ou outro, então corremos o risco dele selecionar um html errado, como <h1></h2>m e não queremos isso, então usamos backreference para esses tipos de casos.
    REGEX CORRETO: <(h1|h2).+?>([\s\wõãí]+)</\1>
        Esse \1, indica que eu quero o indice do primeiro grupo, nesse caso (h1|h2), então estou dizendo ou só vai ter h1 nas pontas ou só h2, 

---------------------------- Regex NEGAÇÃO ---------------------------

Para fazer a negação de algo, fazemos da seguinte forma:
^ -> nega um ou mais caracteres.
REGEX: <h1[^>]+?>
    [^>]+ Ao contrario do nosso [a-z]+ que dizemos que queremos itens de a-z uma ou mais vezes, quando colocamos a negação ^ dizemos que pode tudo, menos o que eu determinar entre [^].
    
-------------------------------- REGEX Flags ------------------------------

g -> para fazer um match global, no alvo inteiro.
    se retirar o g do seu regex, ele vai parar no primeiro alvo que encontrou, exemplo.
        ALVO: 11 AA 22
        REGEX SEM g: \d{2}
        RESULTADO: 11
            Ele apenas irá encontrar o 11 pois não definimos o regex como global, caso fosse global, ele acharia tanto o 11 como o 22, pois ambos são 2 digitos

i -> significa ignorecase, ou seja, independente de letra maiúscula ou minúscula
    Exemplo:
        var str = "Visit W3Schools";
        var patt1 = /w3schools/i;
        var result = str.match(patt1);
        document.getElementById("demo").innerHTML = result;
        Resultado: W3Schools
    meu padrão definido foi em minúsculo, então ele deveria procurar somente por letras minusculas em nosso alvo, porém eu passo uma flag dizendo, ignora o CaseSensitive, procure por tudo que bate com o padrão, tanto faz se for maiusculo ou minúsculo.

m -> significa multiline, para aplicar a regex linha por linha. Nesse caso, as âncoras ^ e $ selecionam o início e o fim de uma linha, e não da string inteira.

-------------------------------- REGEX Metodos ------------------------------
objRegex.exec(alvoAqui) -> executa a regex e devolve um array com as informações sobre o match.

objRegex.test(alvoAqui) -> ela simplesmente testa se a regex existe dentro do nosso alvo, se existe irá retornar true.

result.index -> Especifica o índice no qual inicia o próximo resultado.
objRegex.lastIndex; -> devolve a última posição do match:

        var alvo = "11a22b33c";
        var objRegex = /(\d\d)(\w)/g;
        var resultado = null;
        while(resultado = objRegex.exec(alvo)){
            console.log(resultado);
            console.log(resultado.index);
            console.log(objRegex.lastIndex); //devolve a última posição do match: 
            
        }
alvo.replace(regex, 'algo a ser substituido');
    Utilizando replace com regex:
        var anoMesDia = '2007-12-31'
        var exp = /-/g;
        anoMesDia = anoMesDia.replace(exp, '/');
        "2007/12/31"

alvo.split(separador); -> Cria um array com cada item considerando o separador utilizado.

alvo.match(regex) -> retorna o resultado em um vetor com base na expressão regular, exemplo:
    var codigos = 'A121B12112C12212F12G01';
    var exp = /[A-Za-z]\d+/g
    var codigosExtraidos = codigos.match(exp);
    codigosExtraidos
    (5) ["A121", "B12112", "C12212", "F12", "G01"]
    codigosExtraidos[0]
    "A121"


---------------------------- EXEMPLO DE REGEX ----------------------------

var cep = /^\d{5}-\d{3}/ - > aqui estou dizendo que, deve começar com 5 digitos E terminar com 3 digitos.

        var alvo = "11a22b33c";
        var objRegex = /(\d\d)(\w)/g;
        var resultado = null;
        while(resultado = objRegex.exec(alvo)){
            console.log(resultado[0]); //devolve o match inteiro: 11a
            console.log(resultado[1]); //devolve o primeiro grupo: 11
            console.log(resultado[2]); //devolve o segundo grupo a
            console.log(resultado.index); //devolve a posição onde o match começo no alvo: 0
            console.log(regex.lastIndex); //devolve a última posição do match: 3
        }


---------------------------- EXERCÍCIOS RESOLVIDOS REGEX ----------------------------

DATA: 28 de Março de 1991 - > [1-3]?\d\s+de\s+[A-Z][a-zç]{3,8}\s+de\s+\d{4}
CPF: 444.444.555-55 -> \d{3}\.?\d{3}\.?\d{3}[.-]?\d{2}
PLACA DE CARRO: KMG-8089 -> [A-Z]{3}-\d{4}

FILTRANDO NOME DO EMAIL: 
    REGEX: ([a-z.]{4,14}[a-z\d])@(?:caelum.com.br|alura.com.br)$
    EMAIL: super.mario2@caelum.com.br
    RESULTADO DO FILTRO GROUP: super.mario2
Validando Email:

REGEX 1°:^([A-Za-z\d]+([\.a-zA-Z\-]+)?)\@(?:[a-zA-Z\d]+\.?(?:[a-zA-Z\d]+)?\.?(?:[a-zA-Z\d]+)?(?:.com|.com.br|.info|.JP))$

REGEX 2°: (^[a-zA-Z0-9]+[\w\.\-]*)\@(?:(?:[A-Za-z\d]+)\.)+[A-Za-z]{2,4}$

lista de email:
donkey.kong@kart.com.br
bowser1@games.info 
super-mario@nintendo.JP
TEAM.donkey-kong@MARIO.kart1.nintendo.com
---------------------------- OBJETOS JAVASCRIPT ----------------------------

Para criar um objeto basta fazer o seguinte:


 function obtemPacienteDoFormulario(form){
        //AQUI EU CRIO O OBJETO
            var paciente = {
                nome: form.nome.value,
                peso: form.peso.value,
                altura: form.altura.value,
                gordura: form.gordura.value
            }
            
            return paciente;
        }
        
Pronto, temos o objeto paciente criado, para acessar as propriedades/CARACTERISTICAS desse objeto utilizamos o .(ponto), exemplo:

var nome = paciente.nome; -> essa linha eu estou dizendo que minha variavel nome vai receber o valor da propriedade nome do objeto paciente.




---------------------------- ARRAYS JAVASCRIPT ----------------------------

Como criar um array?

var nomeVariavel = []; -> cria um array vazio.

nomeVariavel.push("alguma coisa"); -> o .push adiciona itens ao array.



******************************************************************** HTML ********************************************************************

-------------------------------- ATRIBUTOS --------------------------------

tabindex="1" -> propriedade de tag HTML, combinado com a pseudoclasse :focus no css, quando o usuário apertar tab no navegador ele pode ter a experiência de verificar os efeitos sem precisar posicionar o mouse encima(:hover) por ex.

colspan="2" -> Usado em tabelas para em vez de ocupar apenas uma cédula, ocupe 2 por exemplo.

rowspan="2" -> Quando usamos a propriedade rowspan, não precisamos colocar um <td> para aquela coluna na linha seguinte.


-------------------------------- ATRIBUTOS CUSTOMIZAVEIS --------------------------------

 recurso do HTML 5 que são os atributos customizados. A partir dessa versão do HTML, podemos criar nossos próprios atributos em qualquer elemento do HTML sem deixá-lo inválido; basta que esse atributo comece com data-. Por exemplo:

<!-- a declaração abaixo é válida a partir do HTML 5 -->
<a href="#" data-legenda="Clique em mim">Link</a>

-------------------------------- TAGS Lembrete --------------------------------

<main> -> indica conteúdo principal.
<blockquote> - indica citação.
<cite> - indica autor de citação.
<aside> - conteúdo auxiliar ao conteúdo principal, como links relacionados ao conteúdo
<article> - conteúdo que, por si só, já tem um sentido completo, como um post de um blog ou uma notícia
<header> - cabeçalho da página ou de uma região dela
<footer> - mesma ideia da tag <header> para o rodapé
<section> - parte/seção de uma página ou texto.
<nav> - indica ali existe navegação pelo site.
<time> - Usado para definir data/hora.
<table> - Cria uma tabela
<thead> - Define o Cabeçalho da tabela Mais SEMANTICO.
<tbody> - Define o corpo da tabela Mais SEMANTICO.
<tfoot> - Define o "rodape" da tabela Mais SEMANTICO.
<th> - indica o Cabeçalho.
<tr> - cria a linha da tabela
<td> - cria a coluna da tabela.
<dl> - cria a lista IMPORTANTE Neste caso, o elemento <dl> é o mais adequado. Estamos descrevendo um único item, detalhando características dele, ao invés de <table>
<dt> - Define o Nome ou titulo
<dd> - Define a descrição desse nome ou titulo




******************************************************************** CSS ********************************************************************

-------------------------------- SELETORES DE ATRIBUTOS --------------------------------

O cifrão representa que queremos que o atributo termine com um valor.

[src$=".jpg"]



Se quisermos selecionar todos os links que começam com http://, podemos usar o seletor:

[href^="http://"]

-------------------------------- FLEXBOX --------------------------------

IMPORTANTE, ao colocar display flex, todos os seus filhos vão para a esquerda como se fosse float(left) e passam a ter o mesmo tamanho.

IMPORTANTE Podemos ter containers FLEXBOX DENTRO DE containers FLEXBOX, resumindo, tanto o pai quando os filhos podem ter a propriedade display flex;

display: flex; -> faz com que o elemento se comporte como um FLEXBOX.

align-items: center; -> centraliza os elementos.

justify-content: space-between; -> justifica o elemento com o espaço(s) entre o elemento(s)(space-between);

flex-direction: column; -> Faz com que os filhos fiquem em forma de coluna
flex-direction: column-reverse; -> Colunna reversa, isso é, se era 1 2 3 fica 3 2 1
flex-direction: row; -> Faz com que seus filhos fiquem em formado de linha.
flex-direction: row-reverse; -> linha reversa em vez de 1 2 3 fica 3 2 1

flex: 1; -> Quero dizer ao container(PAI) FLEXBOX que cada caixinha tem que ter a mesma proporção.
EXEMPLO:
.caixinha{
  display flex;
  flex-direction: column;
  flex: 1;
}
.caixinha:nth-child(2){
  flex: 2; -> Quero dizer ao container pai que a segunda caixinha será maior que as com               flex: 1;
}

flex-grow -> Determina quanto o elemento selecionado deve crescer.
flex-shrink -> Determina quanto o elemento deve diminuir.
flex-basis -> Determina qual o tamanho minimo que o elemento deve ter.


por padrão o flexbox deixa tudo em uma linha só, com o flex-wrap: wrap; podemos quebrar a linha.
flex-wrap: wrap;
juntamente com o flex: 1 1 45% decidimos quantos elementos vão ficar dentro daquele container antes de quebrar a linha.

oder: 1; -> define quem aparecerá primeiro independente da ORDEM do HTML. (SEO ACESSIBILIDADE)


-------------------------------- ANIMATION --------------------------------

animation: nomeAnimação TempoAnimação;

animation: aparece 2s;
OU
animation: aparece 2s ease; -> podemos colocar todos os tipos de suavização igual no transition(ease, ease-in, ease-ou, linear etc..)

@keyframes aparece{
  0%{
    opacity: 0;
  }
  100%{
  opacity: 1;
  }
}

definimos um keyframes, e especificamos os pontos chaves da nossa animação, nesse caso, começara com 0 de opacidade e quando chegar nos 100% ficara com 100% de opacidade.

animation-direction - > define a direção da animação.

Exemplo, animation-direction: alternate; a animação ira ficar alternando o seu comportamento.

animation-timing-function: ease-in; -> propriedade que se coloca os (ease, ease-in, ease-in-out etc.)

animation-play-state: paused; ou running -> dizemos nessa propriedade se queremos que a animação continue ou pare, normalmente usamos no :hover essa propriedade.

animation-delay: -> da um tempo para iniciar a animação.

animation-fill-mode: backwards; -> faz com que a animação já começe do começo.
animation-fill-mode: forwards; -> mantem o estilo final da animação mesmo após ela terminar de executar.
animation-fill-mode: both; -> faz o serviço do backwards e forwards.
animation-fill-mode: none;

O banner do Twitter fica aparecendo antes da animação começar. Isso indica que o estilo inicial da animação não é aplicado ao elemento antes que ela comece por padrão. Porém, podemos mudar esse comportamento.
A especificação de animações define uma propriedade chamada animation-fill-mode. Essa propriedade nos permite fazer com que o navegador aplique o estilo inicial de uma animação antes mesmo de ela começar (valor backwards), mantenha o estilo final de uma animação mesmo após ela terminar de executar (valor forwards) ou ainda faça as duas coisas (valor both).

-------------------------------- TRANSITION --------------------------------

Faz a transição de uma ou mais PROPRIEDADES, o tempo dessa transição você que define, a PROPRIEDADE que sofrera com o transition deve estar no :hover ou :focus.

PORQUE NÃO COLOCAR O TRANSITION NO HOVER? Não colocamos no HOVER/FOCUS, pois o efeito da transição só iria acontecer quando colocassemos o mouse encima, se tirassemos o mouse de cima ele NÃO voltaria com efeito, ele simplesmente cortaria o efeito.

transition: transform 1s, box-shadow 3s;
transition: all 2s;
transition: color 3s;

transition-delay -> define depois de quanto tempo a transição vai começar, exemplo:

transition: transform 1s, box-shadow 3s;
transition-delay: 0s, 2s; -> aqui eu estou dizendo que minha primeira transição(transform no caso) n teria delay pra começar, e minha segunda transição( box-shadow no caso) teria um DELAY de 2s para começar a fazer a sua propria transição box-shadow de 3segundos no caso.

                            TIPOS DE SUAVIZAÇÃO
                            (Colocar depois do tempo)
                            
linear -> sem suavização, sem na mesma velocidade.
ease -> com suavização
ease-in -> com suavização no começo.(demora mais pra aparecer no começo e vai mais rapido no final)

ease-out -> com suavização no final.(vai mais rapido no COMEÇO e demora mais no FINAL)
ease-in-out -> com suavização no começo e no final.


-------------------------------- VERTICAL-ALIGN --------------------------------

IMPORTANTE!
A propriedade vertical-align pode ser usada em dois contextos:

    1°CONTEXTO:
    
    Para alinhar verticalmente uma caixa de elementos inline dentro de sua caixa de linha. Por exemplo, poderia ser usado para alinhar verticalmente um  <img> em uma linha de texto:
    
    2°CONTEXTO:
    
    Para alinhar verticalmente o conteudo de uma celula em uma tabela(table-cell):
    

/* keyword values */
vertical-align: baseline;
vertical-align: sub;
vertical-align: super;
vertical-align: text-top;
vertical-align: text-bottom;
vertical-align: middle;
vertical-align: top;
vertical-align: bottom;

/* <length> values */
vertical-align: 10em;
vertical-align: 4px;

/* <percentage> values */
vertical-align: 20%;

/* Global values */
vertical-align: inherit;
vertical-align: initial;
vertical-align: unset;

-------------------------------- BORDER --------------------------------

IMPORTANTE!! -> border-collapse E border-spacing É utilizado APENAS na tag <table>.

border-collapse: separate; -> separa as bordars
border-collapse: collapse; -> já é padrão vir definido como collapse(juntas);

border-spacing: 5px; -> define o tamanho do espaço entre as bordas.

-------------------------------- PROPRIEDADE DISPLAY --------------------------------

inline -> deixa elementos na mesma linha, elemenos inline não podem ter altura definida.
block -> todo elemento definido como block ocupa a linha inteira, ou seja, não deixa outro elemento ocupar a mesma linha que ele
inline-block -> podemos definir largura e altura 
none -> some com o elemento.

-------------------------------- PSEUDOELEMENTOS --------------------------------

IMPORTANTE! 
A propriedade content é exclusiva dos pseudoelementos before e after, menos que não for utiliza-lo DEVE coloca-lo junto ao seu css.

EX:

a:after{
    content: ""; <- deixe-o vazio, CASO não for utilizado, mas deve coloca-lo msm que vazio, é obrigatório, SE não o navegador não le.
}

:first-letter -> permite estilizar a primeira letra de um parágrafo por exemplo( p:firs-letter )
:before -> antes
:after -> depois

-------------------------------- PSEUDOCLASSES --------------------------------


:first-child - > seleciona o primeiro filho
:last-child - > seleciona o ultimo filho
:nth-child - > aqui podemos brincar um pouco, podemos intercalar os estilos de acordo com os parâmetros passados.
:nth-last-child -> seleciona o ultimo filho
:nth-last-of-type - seleciona o ultimo tipo de elemento.

EXEMPLO:

Generalizando: :nth-child(xn + c)

Em que:

x é a periodicidade, de quantos em quantos elementos será aplicado o estilo;
c é o ponto de partida;
n é a variável, que começa em 0 (zero).

li:nth-child(2n+1){
    color: blue;
}

<ul>
    <li>texto</li> <- estilo aplicado aqui
    <li>texto</li>
    <li>texto</li> <- estilo aplicado aqui
    <li>texto</li>
</ul>

EXEMPLO 2:

li:nth-child(2n+2){
    color: blue;
}

<ul>
    <li>texto</li> 
    <li>texto</li> <- estilo aplicado aqui
    <li>texto</li> 
    <li>texto</li> <- estilo aplicado aqui
</ul>

EXEMPLO 3:

li:nth-child(odd){ <- pegaria todos os ímpares
    color: blue;
}

li:nth-child(even){ <- pegaria todos os pares
    color: blue;
}

:nth-of-type - > seleciona por tipo de elemento.

:hover - > ao passar o mouse faz algo.
:focus
:active
:checked

-------------------------------- SELETORES AVANÇADOS CSS --------------------------------

>>>> SELETOR ~ (Seleciona DEPOIS de outros elementos): <<<<

ul ~ li{ background-color: red; } -> seleciona todos os li DEPOIS do elemento UL 

ul div ~ li { background-color: red; } -> seleciona todos os li que estão dentro do UL E que estão DEPOIS da primeira DIV
<ul>
   <div>div</div>
    <li>algo</li>
    <li>algo</li>
    <div>div</div>
    <li>algo</li>
    <div>div</div>
    <li>algo</li>
    <div>
        <li>li dentro da div</li>
    </div>
</ul>
<li>li fora do ul</li> <- Somente esse elemento será afetado pelo background.
      
>>>> SELETOR  + (IMEDIATAMENTE Depois) : <<<<

img + p{ background-color: red; }

    <img src="" alt="">
    <p></p> <- APENAS este ficaria com a cor de fundo vermelha, pois o elemento p que vem IMEDIATAMENTE DEPOIS de img é o primeiro P.
    <p></p> 
    <p></p> 
    
img + p { background-color: red;}

    <img src="" alt="">
    <div></div> <- Neste caso, tem uma div IMEDIATAMENTE APÓS a tag img, então o seletor css img + p acima não funcionará.
    <p></p> 
    <p></p> 
    <p></p> 
    
    
>>>> SELETOR  > (Seleciona os filhos somente) : <<<<

div > p -> selecionará apenas os seus filhos.

<div> <- pai
    <p>texto</p> - <- filho da div
        <blockquote> <- filho da div
            <p>aaaa</p> <- filho do bloquote
        </blockquote>
    <p>aaaa</p> <- filho da div
</div>

--------------------------- BACKGROUND GRADIENT --------------------------

IMPORTANTE! Repetimos a mesma cor duas vezes quando queremos dizer para o navegador que ela tem que ir de x porcentagem até x porcentagem,
Exemplo: red 20%, red 40%, blue 40%, blue 100%.

background-image: linear-gradient(de onde pra onde, cor porcentagem,cor porcentagem, até quantas cores quiser).

background-image: radial-gradient(ellipse at bottom left, rgba(60, 29, 61, 0.8),rgba(60, 29, 61, 0.8) 65%, #000 65%, #000 70%, transparent 70%, transparent);

background-size: 100%(width) 200px(height); caso a imagem não tenha essa altura ela quebrará em várias imagens de 200px.

background-repeat: define o tipo de repetição na imagem.

background-position: define a posição de uma imagem dentro de seu elemento pai.

background-size: cover; -> faz com que mesmo que a imagem não tenha 800px ocupe 800px na tela.



-------------------------------- SOMBRAS --------------------------------

text-shadow: direita esquerda espalhamento cor;

box-shadow: horizontal vertical cor OU horizontal vertical espalhamento-sombra cor.

opacity: 0~1 0 regulamos o nível de transparencia do elemento pelo opacity 0 ele fica invisivel e 1 ele fica totalmente visivel 0.5 ele fica meio termo.

-------------------------------- TRANSFORM --------------------------------

IMPORTANTE ! -> A propriedade não funciona em elementos com a propriedade display definida como inline.

transform: rotate(30deg); -> Faz com que um elemento rotacione de acordo com os graus(deg) definidos.

transform: scale(1.5); -> Aumenta ou diminui o elemento de acordo com o parâmetro, se for > 1 ele aumenta o elemento, se for < 1 ele diminui o elemento.

transform: skew(20deg) -> Entorta o elemento \ \ de acordo com os graus(deg) definidos.

transform: translate(X, Y) -> Muda o elemento de posição para qualquer lugar da tela.

Agora resta a questão: como fazer a translação? Com um pouco de trigonometria, chegamos nas seguintes fórmulas para o quanto temos que transladar na horizontal e na vertical.

Na horizontal: cos(45) * (altura - largura) + largura

Na vertical: -1 * sen(45) * altura

-------------------------------- UNIDADE DE MEDIDA --------------------------------

IMPORTANTE! -> Definir a porcentagem da fonte no html{ font-size: X ;} e NÃO DO body{}
Assim conseguimos ter total controle da propriedade font-size em TODA a PAGINA.
  
PORCENTAGEM:
    
Ao Utilizar a "unidade de medida PORCENTAGEM, ela se baseia, 
com base na largura(width) de seu elemento pai para fazer o cálculo da porcentagem.

Exemplo:

Temos uma div.pai com width de 720px;
e uma div.filha com padding de 20px e width de 250px,
SE alterarmos padding para 10% resultará em 72px de padding, pois 10%
de 720px(seu elemento pai) é 72px.
O mesmo ocorre para o width, se colocarmos 10% seu tamanho será reduzido
para 72px.

EM:

IMPORTATE ! USA A FONTE DO ELEMENTO PAI COMO REFERÊNCIA.

Calculo EM 1.25em x tamanho da fonte do elemento igual tamanho em pixels.

EX: 1.25em x 16px igual a 20px.
    1.25em X 20px igual a 25px.

REM:

IMPORTATE ! USA A FONTE DO NAVEGADOR COMO REFERÊNCIA.

Calculo REM 1.25rem x tamanho da fonte do navegador igual tamanho em pixels.

EX: 1.25rem x 16px igual a 20px.
    1.25rem X 20px igual a 25px.

A vantagem de se utilizar REM é que ele facilita a manutenção do seu código, basta alterar o tamanho da fonte no html,
e ele já redimenciosa todo o resto, isso não ocorre com pixels.

Tem um porem, rem faz a medida com base na ALTURA da fonte, será que você quer por exemplo, definir a LARGURA de um elemento,
com base na ALTURA da fonte?

CH:

CH seria a medida da largura do caracter "zero".


RESUMO DAS MEDIDAS:

PX é sempre px

EM é medido com base na fonte do seu elemento pai.

REM é medido com base na fonte do navegador.

CH tem como base a largura do caractere zero da fonte usada;

PORCENTAGEM tem como base ou a largura do elemento pai ou o font-size do elemento anterior.


PIXEL É UMA MEDIDA ABSOLUTA, EM REM CH % São medidas RELATIVAS.

-------------------------------- FLOAT --------------------------------

OBS: Flutua um elemento porem o mantem na mesma linha de posição original,
qualquer elemento que esteja abaixo de um elemento com float, ficará lado a lado,
a menos que se use a propriedade CLEAR, para limpar a flutuação.

left -> flutua um elemento a esquerda.

right -> flutua um elemento a direita.

-------------------------------- CLEAR --------------------------------

right -> limpa a flutuação a direita.

left -> limpa a flutuação a esquerda.

both -> limpa a flutuação de ambos.

-------------------------------- POSITION --------------------------------

Absolute -> Posição Absoluta com relação a janela, ou a algum elemento em tordo dele com o valor definido como relativo.

Relative -> Posicionamento será relativo ao local atual do elemento na tela.

Fixed -> Será fixo com relação a tela.

-------------------------------- TEXT-INDENT --------------------------------

*********************** ATALHOS TECLADOS ***********************

No Sublime é CTRL+SHIFT+D e no Bracket CTRL+D. Se nao for nenhum desses seu editor, da uma googlada com "nome do seu editor + duplicate line shorcut".