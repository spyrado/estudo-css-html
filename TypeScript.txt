**************** TypeScript ****************

--------------- Configurando o compilador do TypeScript --------------- 

    npm init -> caso nao tenha o package.json instalado ainda...
    npm install typescript@2.3.2 --save-dev
    Após isso precisaremos configura-lo, para dizer em qual diretorio ele vai ir, 
    qual versao de js ele vai gerar em tal diretorio, fazemos isso na pasta raiz app/tsconfig.json

    dentro de tsconfig.json colocamos a seguinte configuracao:
        {
            "compilerOptions": {
                "target": "es6",
                "outDir": "app/js"
                "noEmitOnError": true,
                "noImplicitAny": true,
                "removeComments": true
            },
            "include": [
                "app/ts/**/*"
            ]
        }
    compilerOptions -> target -> significa, para qual versao js, eu vou converter o meu ts.
    compilerOptions -> outDir -> significa, para qual diretorio eu vou jogar meu ts já compilado para js.
    compilerOptions -> noEmitOnError -> se true, significa que ENQUANTO houver erro de compilacao, ele nao vai compilar
        para javascript..
    compilerOptions -> noImplicitAny -> se true, nao adote o tipo any
    compilerOptions -> removeComments -> remove os comentários que iriam para producao, deixando mais limpo e mais leve,
        e mais minificado o código, os comentarios só vao permanecer em hambiente de desenv.

    include -> de quais lugares eu devo pegar o ts para compilar para js.

    temos que configurar o package.json, para executar o compiler..
        "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1",
            "compile": "tsc",
            "start": "tsc -w"
        },
    
    no terminal digite:
        npm run compile
    ou para ficar watching modificacoes digite:
        npm start

    Só lembrando, que o compilador do typescript fica em /node_modules/typescript/bin/tsc
        por isso chamamos tsc toda hora na aba scripts
    
    e seu codigo ts será convertido em es6, e CASO tenha algum erro, ele vai gerar em tempo de compilacao,
    e NAO de execucao, como no javascript.

    IMPORTANTE, sempre que voce criar/modificar o arquivo tsconfig.json, feche e abra o visual studio, para que ele tambem,
    leve em consideracao as novas alteracoes do arquivo tsconfig.json.

    ---------- TypeScript ----------

    No mundo TypeScript.. declaramos as variaveis no começo da classe, como é feito em Java, e outras linguagens,
    exemplo:
        class Negociacao {

            private _data;
            private _quantidade;
            private _valor;

            constructor(data, quantidade, valor){
                
                this._data = data;
                this._quantidade = quantidade;
                this._valor = valor;
            }
        }

    ---------- Classe abstrata ----------

    abstract -> Classes abstratas são classes base das quais outras classes podem ser derivadas. 
        Eles podem não ser instanciados diretamente. Ao contrário de uma interface, uma classe abstrata pode conter
        detalhes de implementação para seus membros. A palavra-chave abstract é usada para definir classes abstratas,
        bem como métodos abstratos dentro de uma classe abstrata.

    Classe abstrata não pode ser instanciada.
    Classe abstrata pode conter detalhes de implememtacao para seus membros.

    ---------- Método abstrato ----------

    abstract template(model: T): string;

    Indica para as classes filhas que o metodo DEVE ser implementado, caso o metodo n for implementado gerará um erro.

    ---------- Modificadores de Acesso ----------

    private -> somente a propria Classe pode acessar.
    protected -> Apenas a propria classe e seus filhos(herança) podem acessar.

    ---------- Tipagem ----------

    DICAS:

    Toda variavel que não for declarada seu TIPO, por padrão ela vem como ANY(aceita receber qualquer tipo).

    Variaveis com tipo number e tipo String, funcionam metodos nelas, pois o javascript faz o (auto-boxing)
    para String(Objeto) e Number(Objeto) respectivamente.

    Tipo Element, é genérico.. se voce quiser pegar o valor de um campo input por exemplo, vc tem que declarar o tipo correto

    BOAS PRATICAS:

    Sempre devolver o tipo de retorno em um metodo, exemplo
            adiciona(negociacao: Negociacao): void{
                this._negociacoes.push(negociacao);
                return "xx"; <- vai dar erro, pois eu declarei o tipo void que nao deve retornar nada, removendo o return,
                                    ele compila sem problemas.
            }

            paraArray(): Negociacao[]{
                return [].concat(this._negociacoes);
            }
    Em ambos os casos eu estou definindo qual é o tipo de dado aceito, e qual o tipo de dado retornado.


    private nomeVariavel: tipoVariavel;
    private nome: any;

    any -> qualquer coisa.
    string -> recebe um texto
    number -> tanto inteiro como float.
    HTMLInputElement -> recebe elementos do tipo input.
    Element -> representa o tipo elemento html em typescript
    Event -> representa o tipo evento em typescript
    Date -> Objetos do tipo data.
    Array -> temos que indicar o tipo do Array
        private _negociacoes: Array<Negociacao> = []; OU private _negociacoes: Negociacao[] = [];
        O segundo metodo é um shorthand para declaracoes de array:

    Nesse caso ele só vai receber Objetos do tipo Negociacao

    Declarando Classes:
        private _negociacoes: Negociacoes = new Negociacoes();
            shorthand 
        private _negociacoes = new Negociacoes();
            o typescript já identifica que o _negociacoes DEVE ser do tipo Negociacoes, por receber a classe dele.

    ---------- ATALHOS PARA PASSAGEM DE PARAMETROS NO CONSTRUTOR ----------

    ANTES:
        class Negociacao {

        private _data: Date;
        private _quantidade: number;
        private _valor: number;

            constructor(data, quantidade, valor){
                
                this._data = data;
                this._quantidade = quantidade;
                this._valor = valor;
            }
        }
    DEPOIS:
        class Negociacao {

        constructor(
            private _data: Date, 
            private _quantidade: number, 
            private _valor: number
        ){}

    JÁ declaramos no proprio construtor o modificador de acesso, e o tipo.

---------- Casting TYPESCRIPT ----------

Esse processo de conversão explícita é chamado de casting. No caso, estamos forçando uma conversão
    de um tipo mais genérico para um tipo mais específico,
    estou forçando o elemento generico (document.querySelector('#data');) 
    para virar um elemento do mesmo tipo da minha variavel (private _inputData: HTMLInputElement;)
    resultando em (this._inputData = <HTMLInputElement>document.querySelector('#data');).

private _inputData: HTMLInputElement;
private _inputQuantidade: HTMLInputElement;
private _inputValor: HTMLInputElement;

constructor() {

    this._inputData = <HTMLInputElement>document.querySelector('#data');
    this._inputQuantidade = <HTMLInputElement>document.querySelector('#quantidade');
    this._inputValor = <HTMLInputElement>document.querySelector('#valor');
} 

Outra situacao tambem:
    eu posso ter um tipo mais GENERICO, E receber um TIPO mais específico, sem precisar de conversao.
    exemplo:

    this._inputData = <HTMLInputElement>document.querySelector('#data');
    const a: Element = this._inputData;

    Declarei uma constante a como Element(generico) e estou pessando o inputData(HTMLInputElement), que é especifico.
    porem n vou ter acesso ao a.value, pois o meu tipo é o generico.

---------- Heranca/Herança TYPESCRIPT ----------

Em typescript temos que mudar um pouco a forma como fazemos heranca em es6.

Temos que informar um tipo generico View<T> para a classe pai, e passar esse tipo generico,
para todos os argumentos que necessitam de um tipo generico nas classes filhas,
nesse caso eu estou passando esse tipo genérico para os tipos dos metodos,
pois cada metodo tem um tipo diferente:
    update(model: T): void{
    template(model: T): string{
Em suas classes filhas eu faco o seguinte para identificar o tipo.
    class MensagemView extends View<Mensagem> {
    class NegociacoesView extends View<Negociacoes> {
Dizendo olha View.. onde tem o tipo generico ai no Pai, coloca esse tipo aqui pra mim:
    View<Mensagem>
    View<Negociacoes>
E assim todos os metodos do pai, vao seguir a regra definida nas classes filhas.

class View<T> {

    protected _elemento: Element;

    constructor(seletor: string){

        this._elemento = document.querySelector(seletor);
    }

    update(model: T): void{
        this._elemento.innerHTML = this.template(model);
    }

    template(model: T): string{

        throw new Error('Você deve implementar o metodo template');
    }
}

-- EXEMPLO de classe filha. --

    class MensagemView extends View<Mensagem> {

        template(model: Mensagem): string{

            return model.texto ? `<p class="alert alert-info">${model.texto}</p>` : ``;
        }
    }

---------- Declare TYPESCRIPT ----------

declare var $: any;

usamos o declare para "CALAR" a boca do compilador, declaramos uma 
    variavel, que o compilador nao está identificando..
    como no exemplo.. o compilador nao sabe aonde está o dolar do jquery,
    se ele n sabe... ele vai gerar um erro a cada dolar feito..

---------- TypeScript Declaration File ----------

TSD FILE -> caso precisemos de uma biblioteca que fique fora do escopo do typescript, procuramos por,
    TSD FILES, eles sao arquivos que dao compatibilidade de determinada biblioteca para o typescript.

Este arquivo possui informações dos nomes de métodos e funções, inclusive tipos que podem ser utilizados pelo TypeScript.
Quando carregado, o TypeScript conseguirá, baseado nesse arquivo, realizar checagem estática inclusive lançar
mão de todos seu poder através de seu editor ou IDE favorita.

---------- TypeScript Declaration File ----------

    Achando tsd Files:
        https://www.npmjs.com/package/@types/nomeLib||frameWork||etc

    Ou podemos simplesmente tentar a sorte no terminal e digitar:

    npm install @types/nomeDaLibOuFramework --save-dev

    npm install @types/jquery --save-dev
    npm install @types/loadash --save-dev
    npm install @types/underscore --save-dev

    TSD FILE 
        npm install @types/jquery@2.0.42 --save-dev

    Esse é um tsd file para conseguirmos utilizar o JQuery em nosso projeto typescript, instalando ele
        o typescript já passa a reconhecer o jquery.