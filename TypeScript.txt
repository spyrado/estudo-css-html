**************** TypeScript ****************

--------------- Configurando o compilador do TypeScript --------------- 

    npm init -> caso nao tenha o package.json instalado ainda...
    npm install typescript@2.3.2 --save-dev
    Após isso precisaremos configura-lo, para dizer em qual diretorio ele vai ir, 
    qual versao de js ele vai gerar em tal diretorio, fazemos isso na pasta raiz app/tsconfig.json

    dentro de tsconfig.json colocamos a seguinte configuracao:
        {
            "compilerOptions": {
                "target": "es6",
                "outDir": "app/js"
                "noEmitOnError": true,
                "noImplicitAny": true,
                "removeComments": true,
                "module": "system",
                "strictNullChecks": true
            },
            "include": [
                "app/ts/**/*"
            ]
        }
    compilerOptions -> target -> significa, para qual versao js, eu vou converter o meu ts.
    compilerOptions -> outDir -> significa, para qual diretorio eu vou jogar meu ts já compilado para js.
    compilerOptions -> noEmitOnError -> se true, significa que ENQUANTO houver erro de compilacao, ele nao vai compilar
        para javascript..
    compilerOptions -> noImplicitAny -> se true, nao adote o tipo any
    compilerOptions -> removeComments -> remove os comentários que iriam para producao, deixando mais limpo e mais leve,
        e mais minificado o código, os comentarios só vao permanecer em hambiente de desenv.
    compilerOptions -> module -> Ele exibe uma série de módulos que ele suporta, um deles é o LOADER system.js,
        que facilita a vida do desenv.. gerando um único arquivo com todas as suas dependencias.
    compilerOptions -> strictNullChecks -> Nao deixa uma variavel com um tipo definido receber null ou undefined, exemplo:
        let temCarteira: boolean = true;
        temCarteira = null; <- caso strictNullChecks, nao esteja ativado, eu posso sim fazer um tipo definido receber null.
        se vc quiser receber tipos null use a tipagem correta.
        let temCarteira: null = null;

    include -> de quais lugares eu devo pegar o ts para compilar para js.

    temos que configurar o package.json, para executar o compiler..
        "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1",
            "compile": "tsc",
            "start": "tsc -w"
        },
    
    no terminal digite:
        npm run compile
    ou para ficar watching modificacoes digite:
        npm start

    Só lembrando, que o compilador do typescript fica em /node_modules/typescript/bin/tsc
        por isso chamamos tsc toda hora na aba scripts
    
    e seu codigo ts será convertido em es6, e CASO tenha algum erro, ele vai gerar em tempo de compilacao,
    e NAO de execucao, como no javascript.

    IMPORTANTE, sempre que voce criar/modificar o arquivo tsconfig.json, feche e abra o visual studio, para que ele tambem,
    leve em consideracao as novas alteracoes do arquivo tsconfig.json.

    ---------- TypeScript ----------

    No mundo TypeScript.. declaramos as variaveis no começo da classe, como é feito em Java, e outras linguagens,
    exemplo:
        class Negociacao {

            private _data;
            private _quantidade;
            private _valor;

            constructor(data, quantidade, valor){
                
                this._data = data;
                this._quantidade = quantidade;
                this._valor = valor;
            }
        }

    ---------- Classe abstrata ----------

    abstract -> Classes abstratas são classes base das quais outras classes podem ser derivadas. 
        Eles podem não ser instanciados diretamente. Ao contrário de uma interface, uma classe abstrata pode conter
        detalhes de implementação para seus membros. A palavra-chave abstract é usada para definir classes abstratas,
        bem como métodos abstratos dentro de uma classe abstrata.

    Classe abstrata não pode ser instanciada.
    Classe abstrata pode conter detalhes de implememtacao para seus membros.

    ---------- Método abstrato ----------

    abstract template(model: T): string;

    Indica para as classes filhas que o metodo DEVE ser implementado, caso o metodo n for implementado gerará um erro.

    ---------- Modificadores de Acesso ----------

    private -> somente a propria Classe pode acessar.
    protected -> Apenas a propria classe e seus filhos(herança) podem acessar.

    ---------- Tipagem ----------

    DICAS:

    Toda variavel que não for declarada seu TIPO, por padrão ela vem como ANY(aceita receber qualquer tipo).

    Variaveis com tipo number e tipo String, funcionam metodos nelas, pois o javascript faz o (auto-boxing)
    para String(Objeto) e Number(Objeto) respectivamente.

    Tipo Element, é genérico.. se voce quiser pegar o valor de um campo input por exemplo, vc tem que declarar o tipo correto

    BOAS PRATICAS:

    Sempre devolver o tipo de retorno em um metodo, exemplo
            adiciona(negociacao: Negociacao): void{
                this._negociacoes.push(negociacao);
                return "xx"; <- vai dar erro, pois eu declarei o tipo void que nao deve retornar nada, removendo o return,
                                    ele compila sem problemas.
            }

            paraArray(): Negociacao[]{
                return [].concat(this._negociacoes);
            }
    Em ambos os casos eu estou definindo qual é o tipo de dado aceito, e qual o tipo de dado retornado.


    private nomeVariavel: tipoVariavel;
    private nome: any;

    any -> qualquer coisa.
    string -> recebe um texto
    number -> tanto inteiro como float.
    HTMLInputElement -> recebe elementos do tipo input.
    Element -> representa o tipo elemento html em typescript
    Event -> representa o tipo evento em typescript
    Date -> Objetos do tipo data.
    Array -> temos que indicar o tipo do Array
        private _negociacoes: Array<Negociacao> = []; OU private _negociacoes: Negociacao[] = [];
        O segundo metodo é um shorthand para declaracoes de array:

    Nesse caso ele só vai receber Objetos do tipo Negociacao

    Declarando Classes:
        private _negociacoes: Negociacoes = new Negociacoes();
            shorthand 
        private _negociacoes = new Negociacoes();
            o typescript já identifica que o _negociacoes DEVE ser do tipo Negociacoes, por receber a classe dele.

    ---------- ATALHOS PARA PASSAGEM DE PARAMETROS NO CONSTRUTOR ----------

    ANTES:
        class Negociacao {

        private _data: Date;
        private _quantidade: number;
        private _valor: number;

            constructor(data, quantidade, valor){
                
                this._data = data;
                this._quantidade = quantidade;
                this._valor = valor;
            }
        }
    DEPOIS:
        class Negociacao {

        constructor(
            private _data: Date, 
            private _quantidade: number, 
            private _valor: number
        ){}

    JÁ declaramos no proprio construtor o modificador de acesso, e o tipo.

---------- Casting TYPESCRIPT ----------

Esse processo de conversão explícita é chamado de casting. No caso, estamos forçando uma conversão
    de um tipo mais genérico para um tipo mais específico,
    estou forçando o elemento generico (document.querySelector('#data');) 
    para virar um elemento do mesmo tipo da minha variavel (private _inputData: HTMLInputElement;)
    resultando em (this._inputData = <HTMLInputElement>document.querySelector('#data');).

private _inputData: HTMLInputElement;
private _inputQuantidade: HTMLInputElement;
private _inputValor: HTMLInputElement;

constructor() {

    this._inputData = <HTMLInputElement>document.querySelector('#data');
    this._inputQuantidade = <HTMLInputElement>document.querySelector('#quantidade');
    this._inputValor = <HTMLInputElement>document.querySelector('#valor');
} 

Outra situacao tambem:
    eu posso ter um tipo mais GENERICO, E receber um TIPO mais específico, sem precisar de conversao.
    exemplo:

    this._inputData = <HTMLInputElement>document.querySelector('#data');
    const a: Element = this._inputData;

    Declarei uma constante a como Element(generico) e estou pessando o inputData(HTMLInputElement), que é especifico.
    porem n vou ter acesso ao a.value, pois o meu tipo é o generico.

---------- Heranca/Herança TYPESCRIPT ----------

Em typescript temos que mudar um pouco a forma como fazemos heranca em es6.

Temos que informar um tipo generico View<T> para a classe pai, e passar esse tipo generico,
para todos os argumentos que necessitam de um tipo generico nas classes filhas,
nesse caso eu estou passando esse tipo genérico para os tipos dos metodos,
pois cada metodo tem um tipo diferente:
    update(model: T): void{
    template(model: T): string{
Em suas classes filhas eu faco o seguinte para identificar o tipo.
    class MensagemView extends View<Mensagem> {
    class NegociacoesView extends View<Negociacoes> {
Dizendo olha View.. onde tem o tipo generico ai no Pai, coloca esse tipo aqui pra mim:
    View<Mensagem>
    View<Negociacoes>
E assim todos os metodos do pai, vao seguir a regra definida nas classes filhas.

class View<T> {

    protected _elemento: Element;

    constructor(seletor: string){

        this._elemento = document.querySelector(seletor);
    }

    update(model: T): void{
        this._elemento.innerHTML = this.template(model);
    }

    template(model: T): string{

        throw new Error('Você deve implementar o metodo template');
    }
}

-- EXEMPLO de classe filha. --

    class MensagemView extends View<Mensagem> {

        template(model: Mensagem): string{

            return model.texto ? `<p class="alert alert-info">${model.texto}</p>` : ``;
        }
    }

---------- Declare TYPESCRIPT ----------

declare var $: any;

usamos o declare para "CALAR" a boca do compilador, declaramos uma 
    variavel, que o compilador nao está identificando..
    como no exemplo.. o compilador nao sabe aonde está o dolar do jquery,
    se ele n sabe... ele vai gerar um erro a cada dolar feito..

---------- TypeScript Declaration File ----------

TSD FILE -> caso precisemos de uma biblioteca que fique fora do escopo do typescript, procuramos por,
    TSD FILES, eles sao arquivos que dao compatibilidade de determinada biblioteca para o typescript.

Este arquivo possui informações dos nomes de métodos e funções, inclusive tipos que podem ser utilizados pelo TypeScript.
Quando carregado, o TypeScript conseguirá, baseado nesse arquivo, realizar checagem estática inclusive lançar
mão de todos seu poder através de seu editor ou IDE favorita.

---------- TypeScript Declaration File ----------

    Achando tsd Files:
        https://www.npmjs.com/package/@types/nomeLib||frameWork||etc

    Ou podemos simplesmente tentar a sorte no terminal e digitar:

    npm install @types/nomeDaLibOuFramework --save-dev

    npm install @types/jquery --save-dev
    npm install @types/loadash --save-dev
    npm install @types/underscore --save-dev

    TSD FILE 
        npm install @types/jquery@2.0.42 --save-dev

    Esse é um tsd file para conseguirmos utilizar o JQuery em nosso projeto typescript, instalando ele
        o typescript já passa a reconhecer o jquery.

---------- namespace/module TypeScript sistema de modulos do typescript ----------

ANTIGAMENTE para fazer um namespace utilizava-se MODULE, hoje em dia utilizamos namespace.

toda namespace deve ter um nome, e encapsular o código alvo dentro dela
e tambem toda namespace deve exportar, como no exemplo

namespace X {
    export  //codigo a ser encapsulado
}

namespace Views{

    export abstract class View<T> {
    
        //código View
    }
}

Podemos encapsular nesse caso, todas as nossas views em namespace Views, e assim, quando quisermos uma View, é
    só chamar View.nameView.

Como fazer isso?, simples, só fazer mais do mesmo, e incrementar nesse caso a chamada de view que é o PAI..
Views.View para chamar a classe PAI, pois ela está encapsulada agora, e não é mais visivel no escopo global.

namespace Views{
    
    export class NegociacoesView extends Views.View<Negociacoes> {
        //codigo NegociacaoView
    }
}

e para ficar menos verboso, podemos fazer da seguinte maneira, importar a View, e receber Views.View, DEPOIS
    passar em vez de extends Views.View, apenas passamos View.

namespace Views{

    import View = Views.View;

    export class NegociacoesView extends View<Negociacoes> {
        //codigo NegociacaoView
    }
}

POREM... O EcmaScript6 já tem um sistema de módulos, que é bem melhor que o sistema de modulos do TypeScript,
    alem dele fazer tudo isso, ele também gera a dependencia de arquivos.., podemos com alguns recursos System JS por exemplo,
    exibir apenas um arquivo javascript no html, que o nosso System JS, já identifica as dependencias, e concateca tudo, em
    um unico arquivo para nós, o system js nesse caso, n precisa de babel, pois.. o proprio typescript, já faz a conversao
    para ES6.

---------- SystemJs lib TypeScript ----------

É o responsável pelo carregamento do módulo principal da aplicação. A partir desse módulos todas as suas dependências 
    são resolvidas dinamicamente, sem a necessidade de termos que importar cada script individualmente seguindo
    uma ordem de importação definida.

Utilizando o loader SystemJs, após fazer todos os imports necessários, vá até o html em questao,
e coloque esse script. chamando o arquivo.js principal da pagina em questao, que ira chamar todas as outras
dependencias.

<script src="./lib/system.js"></script>
<script>
    //Permite Omitir as extensoes dos imports
    System.defaultJSExtensions = true;
    //A partir da chamada de js/app.js, ele vai comecar a verificar as dependencias e assim por diante.
    System.import('js/app.js').catch(err => console.error(err));
</script>

Porem isso nao é o suficiente o SystemJs depende de um servidor para funcionar, pois ele faz requisicoes AJAX,
    entao, vamos instalar um servidor com npm install lite-server@2.3.0 --save-dev

---------- Estratégia Barrel(barril) ----------

    Um barril, ou barrel no inglês é uma maneira de centralizarmos em um único módulo a importação de outros módulos. 
    Ele evita a explosão da instrução import diversas vezes em um mesmo arquivo quando esse depende de uma série de outros 
    artefatos.

    Essa estratégia consiste em criar um index, e importar todos os modulos necessários, daquela pasta em específico.
    assim podemos solicitar o import utilizando o index, e no import dizemos os modulos que queremos, exemplo:

    Em vez de fazermos isso: 
        import { Negociacoes } from '../models/Negociacoes';
        import { Negociacao } from '../models/Negociacao';
        import { Mensagem } from '../models/Mensagem';
        import { NegociacoesView } from '../views/NegociacoesView';
        import { MensagemView } from '../views/MensagemView';
    
    Fazemos isso:
        import { Negociacoes, Negociacao, Mensagem } from '../models/index';
        import { NegociacoesView, MensagemView } from '../views/index';

    e na estrutura de pasta models, criamos o index que vai server de Barrel(barril):
        models/
            Negociacoes.ts
            Negociacao.ts
            Mensagem.ts
            index.ts <- criamos ele e exportamos todos os modulos necessários da pasta que ele está.

        index.ts:
            export * from './Mensagem';
            export * from './Negociacao';
            export * from './Negociacoes';
        
        Estou dizendo para exportar tudo do modulo Mensagem, tudo do Negociacao e etc.

    E assim fica mais enxuto o nosso código..

----------  Parametros Opcionais ----------

    IMPORTANTE, Parametros Opcionais DEVEM ser os ultimos parametros do seu construtor, pode ter mais de um,
        porem todos tem que ser a ultima opcao, caso tenha um parametro opcional e em seguida um parametro normal,
        ele vai gerar um erro, dizendo que n pode conter parametro normal a frente de um opcional.
    IMPORTANTE Parametros Opcionais sao definidos como undefined, caso vc n passe nenhum valor para o parametro.

    export abstract class View<T> {
        constructor(seletor: string, escapar?: boolean)

    private _negociacoesView = new NegociacoesView('#negociacoesView', true);

    posso ou n passar o parametro true, pois defini na classe como opcional.

    Entao.. quando chamo o construtor de View... ou quem dependa dela nesse caso.., ele n me gerara um erro de compilacao,
        pois eu estou dizendo que escapar é um parametro opcional, pode ou n colocar.
----------  BONUS ----------

    Em nossa classe negociacao temos apenas getters, n utilizamos setters, nesse caso, em vez de utilizarmos
        private em nosso código e chamar seus getters, podemos simplificar utilizando readonly e remover os getters,
        segue um exemplo:

        constructor(
            readonly data: Date, 
            readonly quantidade: number, 
            readonly valor: number
        ){}

        get volume(){
            return this.quantidade * this.valor;
        }

    Nao precisamos fazer dessa maneira:

        constructor(
            private _data: Date, 
            private _quantidade: number, 
            private _valor: number
        ){}

        get data(){
            return this._data;
        }
        get quantidade(){
            return this._quantidade;
        }
        get valor(){
            return this._valor;
        }

        get volume(){
            return this._quantidade * this._valor;
        }

----------  Plugins utilizados ----------

    npm install lite-server@2.3.0 --save-dev

    configurando plugin:

        "scripts": {
            "server": "lite-server --baseDir=app"
        }
    estou dizendo que o meu diretorio base para subir um servidor E ficar observando modificacoes é o app, com isso
        qualquer alteracoes feitas dentro desse diretorio, o servidor automaticamente, vai dar um reload, no meu browser.

    npm install concurrently@3.4.0 --save-dev

    é um plugin que executa mais de um modulo de script do package.json por vez, exemplo:
        "watch": "tsc -w",
        "server": "lite-server --baseDir=app",
        "start": "concurrently \"npm run watch\" \"npm run server\""

    Estou dizendo, executa esses dois comandos (\"npm run watch\" \"npm run server\") pra mim por favor?
        temos que escapar da aspas duplas usando \" pois no comeco e no final ja tem aspas duplas.

----------  Erro  strictNullChecks ----------

Erro ao acionar um strictNullChecks

    paraArray(): Negociacao[]{
        
        return [].concat(this._negociacoes);
    }

Vai me gerar um erro, pois o [] n foi tipado, e para resolver isso colocamos um alias nele.

        paraArray(): Negociacao[]{
            
            return ([] as Negociacao[]).concat(this._negociacoes);
        }
estou dizendo q [] é uma Negociacao[].