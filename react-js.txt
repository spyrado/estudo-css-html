************************ REACT JS ************************

para instalar o React Dom, digite:
  yarn add react react-dom
        OU
  npm install react react-dom

-- Instalando webpack e loaders para o react --

  yarn add @babel/core @babel/preset-env @babel/preset-react @babel/cli webpack webpack-cli

-- utilizando o babel para gerar nosso bundle.js -- 

-- Qual a funcao do babel? --
 fazer com que os browsers mais antigos entendam as novas sintax do javascript moderno.
 ou seja ele transpila o código moderno para um mais antigo para dar suporte/ compatibilidade com os browsers antigos.

// aqui eu digo que ele vai executar o babel pegar todas as configuracoes definidas em babel.config.js
// e aplicar ao arquivo src/index.js e o --out-file fala que eu quero que o código gerado vá para a pasta
// public e crie um arquivo bundle.js
  yarn babel src/index.js --out-file public/bundle.js

-- Facilitando a vida com webpack --
  -- Qual a funcao do webpack? --
  automatizar processos.
yarn add babel-loader // para que o webpack identifique o babel.config.js e carregue suas configuracoes

yarn webpack --mode development // executa o webpack em modo de desenvolvimento.

adicionando live reload no react:
yarn add webpack-dev-server -D

----- AUTOCOMPLETE DE HTML NO JAVASCRIPT CONFIGS ADICIONAIS NO VS CODE -----
   Vá até COMMAND + SHIFT + P procure por Open Json ( o arquivo de config do vs code ), e adicione o codigo
     abaixo:
    "emmet.syntaxProfiles": { "javascript": "jsx" },
    "emmet.includeLanguages": { "javascript": "javascriptreact" },


--- COMPONENTIZACAO DO REACT ---



--- FRAGMANT === NG-CONTAINER DO ANGULAR ---

quando voce deseja adicionar o mesmo elemento varias vezes o react nao permite fazer isso dessa forma:
(
  <Header />
  <Header />
)

voce deve adicionar o fragment que seria como se fosse um container segue exemplo abaixo.

import React from 'react';
import Header from './components/Header';
function App() {
  return (
    <> // ISSO É UM FRAGMENT
      <Header />
      <Header />
      <Header />
    </> // E AQUI VC FECHA.
  );
}

export default App;

ou se nao quiser usar o fragment pode usar direto um vetor que já funciona tambem

[
  <Header />,
  <Header />
]

--- Como atualizar um component react? (useState) HOOK ---

- const [projects, setProjects] = useState(['Desenvolvimento de app', 'Front-end web']);
  Retorna um valor e uma função para atualizar o valor.

  quando utilizamos por exemplo: setProjects([...projects, 'New Item']);
    estamos falando que quero atualizar projects na tela do UI.
    ou seja o setProjects identifica os argumentos passados e inclui no estado definido que é projects,
    nesse caso estou passando um novo array de projects, ai ele inclui isso em projects e atualiza a UI


--- Adicionando css ao react ---

  yarn add style-loader css-loader

  adicionar no webpack a seguinte configuracao:
    {
        test: /\.css/,
        exclude: /node_modules/, 
        use: [
          { loader: 'style-loader' }, // vai pegar oq o css loader identificou e injetar isso dentro do html.
          { loader: 'css-loader' }, // vai ler o arquivo e interpretar as importacoes que tem la dentro.
        ]
      }

--- Adicionando FILES IMAGENS ao react ---
  yarn add file-loader
  adicionar no webpack a seguinte configuracao:
  {
    test: /.*\.(gif|png|jpe?g)$/i,
    use: {
      loader: 'file-loader'
    }
  }

--- COMO CRIAR SERVICOS COM REACT ---

yarn add axios -> esse cara que lida com as requisicoes.

--- ATUALIZANDO COMPONENTES VIA API ---

componentDidMount E useEffect ambos seriam similar a um NgOnInit ou seja para carregar apis e etc sao bem interecantes.

useEffect -> tem dois parametros o primeiro é qual funcao eu quero disparar.
  o segundo parametros é quando eu quero disparar essa funcao.
  exemplo:
  se eu quisesse que essa funcao fosse disparada apenas quando o componente fosse mostrado em tela eu deixava dessa forma
  useEffect(() => {}, []); // nao passo nenhum item no array, ou seja faca o seu ciclo normal de carregamento.
  useEffect(() => {}, [projects]) -> aqui estou falando, dispare minha funcao TODA VEZ que HOUVER uma alteracao na
    prop projects.

--- como fazer funcionar async/await no babel ---

yarn add @babel/plugin-transform-runtime -D

//babel.config.js
module.exports = {
  presets: [ // presets geralmente sao desenvolvimento de terceiros
    '@babel/preset-env',
    '@babel/preset-react',
  ],
  plugins: [
    '@babel/plugin-transform-runtime' <- esse cara aqui
  ]
};