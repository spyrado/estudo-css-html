*********  React Native *********

StatusBar -> é a barra de status onde fica a bateria wifi hora e etc..
  props de StatusBar:
    barStyle -> aqui eu posso definir qual cor vai ficar todos os "texto/icones da StatusBar.
    backgroundColor -> para o android definimos isso caso agt queira um background, um exemplo é 
      deixar a statusBar do android com a mesma cor da aplicacao
    translucent -> quando eu desejo que o conteudo possa ficar abaixo da statusBar do android
    dentre outras props intereçantes https://reactnative.dev/docs/statusbar


******* PERFORMANCEEE ********

Para uso de listas pesadas utilize o FlatList pois ele carrega os items da lista apenas os que 
  estao visiveis na tela, conforme vai fazendo o scroll vai carregamento mais.
  diferente do scroll view que n ajuda na performance, mas tem a mesma funcionalidade VISUAL do flatlist

******* EVENTOS *******

  No react native nao existe on click, iremos utilizar o on press

******* BOTOES *******

O React por padrao tem um button que já está estilizado tanto para ios como para android, mas podemos
 tambem usar outros tipos de botoes, eles sao nomeados como touchableAlgumaCoisa
 podemos escoler um que se destaca ao clicar um q fica opaco ao clicar e assim por diante.

******* NAVIGATION *******

  OBS: SIGA A DOC: https://reactnavigation.org/docs/getting-started

- yarn add @react-navigation/native
- yarn add react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view
- yarn add @react-navigation/stack
- Para mac devemos instalar o cocoapods caso nao tenhamos ele instalado.
- apos isso devemos ir para a pasta meuprojetoapp/ios e executar pod install
- e ele irá instalar as dependencias necessárias

caso esteja utilizando npm leia a doc, lá também tem os instaladores para npm

.Navigator 
  por padrao ele tem um header ativo, podemos customizar esse header, porem caso agt não queira esse header
  podemos utilizar a prop screenOptions e definir para  headerShow: false podemos definir a estilizacao do card
  com o cardStyle e mt mais
.Screen -> aqui damos um nome para relacionar com o nosso componente e passamos o componente


******* POD INSTALL *******

  SEMPRE QUE RODAR o POD INSTALL vc deve rodar o app dnv ou seja yarn ios ou npx run ios

******* IMAGENS EM APPS *******

para fazer o app parar de reclamar da imagem, apenas crie uma pasta chamada @types/index.d.ts
  e coloque essa linha nele:
    declare module '*.png';
  e pronto o app parará de acusar erro ao importar imagens.

Diferente da web, para exibirmos imagens melhores para diferentes tipos de densidade de pixel,
  devemos ter o mesmo nome de arquivo, porem com densidade de pixels diferentes.
  
  O React automaticamente detecta isso e reflete para o dispositivo atual.

  Além disso, se você tiver 
    my-image.ios.png e 
    my-image.android.png, 
  o packager irá escolher o arquivo correto para a plataforma.

  Você também pode usar os sufixos @2x e @3x para fornecer imagens para diferentes densidades de tela.
    image.png
    image@2x.png
    image@3x.png


******* INCLUINDO FONTES DENTRO DO REACT NATIVE *******

artigo de consulta: https://medium.com/@mehrankhandev/ultimate-guide-to-use-custom-fonts-in-react-native-77fcdf859cf4

Pode baixar uma do google fonts se for o caso, mas tem q baixar mesmo, pra ter o arquivo .tff em maos, e
  incluir esse arquivo dentro do codigo.

Você precisa verificar o nome do arquivo antes de usá-lo. O Android usará o nome da fonte, 
  mas no IOS usará o “nome PostScript”. É a parte complicada, deixe-me explicar para você.

******* INPUT *******
  TextInput keyboardAppearance="dark" -> Apenas para ios conseguimos controler qual a cor que o teclado irá abrir.

******* VECTOR ICONS *******

  https://www.npmjs.com/package/react-native-vector-icons
  npm i react-native-vector-icons

  vai para a pasta ios e digite pod install

  para colocar a fonte que voce deseja siga o tutorial no link OU, para IOS va ate ios/seuProjeto/info.plist
    e dentro de UIAppFonts insira a fonte desejada
    <key>UIAppFonts</key>
    <array>
      <string>RobotoSlab-Medium.ttf</string>
      <string>RobotoSlab-Regular.ttf</string>
      <string>Feather.ttf</string>
    </array>

  rode yarn ios

  para android
    vá até: android/app/build.gradle
    lá no final do arquivo digite isso:
      project.ext.vectoricons = [
        iconFontNames: [ 'Feather.ttf'] // Name of the font files you want to copy
      ]
      apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

  e depois caso utilize android rode yarn android

******* HELPERS *******
  yarn add react-native-iphone-x-helper
    helper iphone X entre outras coisas ele calcula o tamanho da 
      barrinha embaixo do iphone para dar o espaco correto, quando for 
      versoes que tenham essa barrinha exemplo iphone x para cima..

******* COMO FAZER UM TECLADO SUBIR E A TELA ACOMPANHAR ELE? *******

KeyboardAvoidingView -> faz com que o conteudo da tela acompanhe o teclado
  e nela temos que setar algumas configs para android e para ios
    <KeyboardAvoidingView
      style={{ flex: 1 }}
      behavior={Platform.OS === "ios" ? "padding" : "height"}
      enabled
    >

 Texto nesse formato geralmente buga, entao é recomendado envolver os textos
  dentro de uma <View></View>


Dentro de KeyboardAvoidingView caso necessário, utilizamos um ScrollView
  para que alem de subir o teclado o usuário possa scrollar a tela
  para isso utilizamos dessa forma:
    <ScrollView 
      contentContainerStyle={{flex: 1}}
      keyboardShouldPersistTaps="handled"
    >
  handled significa que se eu clicar nos inputs e rolar, ele n vai fechar
   o teclado, mas se eu apenas clicar e n fazer mais nada, ele fecha o teclado.