********************** TESTES AUTOMATIZADOS **********************

describe('nomeDaClasse', function(){}); -> uma descricao(geralmente o nome da classe, e uma funcao envolvendo ela.)
  Podemos usar o describe como uma sub descricao.

it('O QUE FAZ?', function() { //automatiza o codigo aqui }) -> uma descricao do que a funcao vai fazer, e dps automatiza ela.

expect(saida()) -> qual a saida que eu espero receber de determinado metodo (no caso saida())

toEqual('saidaEsperada') -> coloca o resultado da saida().

toBeDefined(); -> deve estar definido 

beforeEach(function(){}) -> ele executa toda vez que um teste é chamado,
  podemos inicializar um objeto ou algo que é muito utilizado por ele, e cada teste vai sempre usa-lo como referencia,
  Exemplo de uso:
    var paciente;

    beforeEach(() => {
      paciente = PacienteBuilder().constroi();
    });
    
    describe('Consultas do tipo retorno', () => {
      
      it('Nao deve cobrar nada se for um retorno', () => {
    
        var consulta = new Consulta(paciente,[],false,false);
        expect(consulta.preco()).toEqual(0);
      });
    });


afterEach(function(){}) -> executa valores que viram depois da execucao de determinaco codigo, exemplo dos codigos
  Async.


********** TESTE DE UNIDADE **********
  Normalmente Utilizado Jasmine, para fazer os testes do javascript
  O teste de unidade é aquele que testa uma unidade (uma classe, por exemplo) isolado do resto. 
  Esse tipo de teste não se preocupa com a integração daquela unidade com o resto. É rápido, mas não tão real.

********** TESTE DE SISTEMA **********
  Normalmente usamos Selenium para automatizar testes de interface
  Já o teste de sistema é aquele que testa o sistema como uma caixa preta. 
  Ele não conhece detalhes de implementação, e testa o sistema totalmente integrado. 
  É um teste mais demorado, mas muito parecido com o mundo real.

  ********** TDD (TEST-DRIVEN DEVELOPMENT) **********

  TDD(Desenvolvimento Guiado Pelos Testes), oq isso significa?

  que primeiro fazemos os testes, e depois desenvolvemos, com isso
    pensamos melhor nos requisitos, n pensamos na implementação, e sim
    no que o requisito tinha que fazer.

  Ajuda na qualidade interna do codigo

  Começar pelos testes, faz você pensar mais sobre o código que vai produzir e pensar melhor nos testes que precisa. 
  E isso tem grandes vantagens!
