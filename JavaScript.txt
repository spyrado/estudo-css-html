******************************************************************** JavaScript ****************************************************************

document -> é o DOM da página, se colocarmos somente document dentro de um console.log(document); aparecera todo o conteudo da página.

---------------------------- JSON JS ------------------------------
JSON.parse(respostaServidor'string') -> converte o banco de dados que estava em formato de string para o formato em que o JavaScript possa trabalhar, EXEMPLO:

//tras a resposta do texto que foi requisitado ao servidor.
var resposta = xhr.responseText;
//Com o JSON eu converto a string em objeto JavaScript.
var objPacientes = JSON.parse(resposta);


---------------------------- AJAX JS ------------------------------

var xhtml = new XMLHttpRequest(); -> Um objeto responsavel por fazer Requisições HTTP, XML? sim, ele costumava fazer o transporte de dados do tipo XML, mas hoje em dia ele consegue trafegar outros tipos de dados também, como texto e outras coisas.

xhtml.open("TipoDaRequisição(get,post,etc)", "url(endereço que queremos)"); -> abre a conexão, com o endereço que a gente quer.
    No caso do TipoDaRequisição, será GET, pois quero passar uma url.

xhtml.send(); -> pega a requisição criada(xhtml.open), e envia a requisição para a url.

//após abrir a conexao e enviá-la, devemos pedir para o xhtml, ao carregar, se conseguio receber os dados pedidos xhtml.responseText (A resposta do texto).
xhtml.addEventListener("load", function(){
        //tras a resposta do texto que foi requisitado ao servidor.
        console.log(xhr.responseText);
    });

xhtml.status -> verifica o retorno do url requisitada, se o retorno for == 200 quer dizer que tudo ocorreu bem, se o erro for 404, significa que a página não foi encontrada, enfim, o xhtml.status retorna o tipo de status se foi erro se não foi etc.
---------------------------- ARVORE NODE ------------------------------

x.appendChild(); -> NODE significa COLOQUE COMO FILHO
x.parentNode -> NODE significa que estou SELECIONANDO o PAI do elemento SELECIONADO(x).



---------------------------- PALAVRAS RESERVADAS JS ------------------------------

this -> em javascript o this se refere ao dono do evento referido naquele momento, EXEMPLO:

pacientes.forEach(function(paciente){
    paciente.addEventListener("dblclick", function(){
        this.remove();
    });
});

---------------------------- METODOS/FUNÇÕES JAVASCRIPT / Document ----------------------------

Junção dos dois metodos de Math(Math.floor() + Math.random()).
    EXEMPLO:
        Math.floor((Math.random() * 10) + 1);
    RESULTADO:
        Vai gerar um numero aleatório de 1 até 10.

Math.floor(1.6); -> Arredonda o numero para baixo.
        EXEMPLO:
            Math.floor(1.9);
        RESULTADO:  
            1

Math.random(); -> Gera um numero aleatório 0.XXXXXXXXXXX de 0 até, 
    0.999999...(não inclui o 1).        

querySelector("SEU SELETOR CSS AQUI"); -> A função querySelector faz a busca através de seletores CSS para trazer o HTML que você está interessado.(IMPORTANTE, essa função retorna APENAS 1 ELEMENTO(mesmo que esse elemento tenha varias classes, ele retorna apenas o primeiro)).

querySelectorAll -> ao contrario da querySelector, que seleciona apenas 1 elemento, a querySelectorAll, seleciona todos os elementos ele é um VETOR.

x.textContent -> pega o conteudo do texto.

x.toFixed(2) -> limita o numero a duas casas decimais.

x.addEventListener("nomeEvento", funçãoAqui); -> Adiciona um escutador de evento, seja de click do mouse de rolagem enfim.

x.appendChild(); -> NODE significa COLOQUE COMO FILHO

document.createElement("nomeElemento") -> Cria um elemento.
Exemplo:

 var form = document.querySelector("#form-adiciona");
        
        var nome = form.nome.value;
        var peso = form.peso.value;
        var altura = form.altura.value;
        var gordura = form.gordura.value;
        
        /* Aqui eu estou criando o elemento PAI(TR) e seus Futuros FILHOS(TD) */
        var pacienteTr = document.createElement("tr");
        var nomeTd = document.createElement("td");
        var pesoTd = document.createElement("td");
        var alturaTd = document.createElement("td");
        var gorduraTd = document.createElement("td");
        var imcTd = document.createElement("td");
        
        /* Estou dando valor para as TD'S */
        nomeTd.textContent = nome;
        pesoTd.textContent = peso;
        alturaTd.textContent = altura;
        gorduraTd.textContent = gordura;
        
        /* Aqui eu faço o futuro virar realidade, e falo pro JS, Coloque como filho do pacienteTr(PAI) todos os meus TDS*/
        pacienteTr.appendChild(nomeTd);
        pacienteTr.appendChild(pesoTd);
        pacienteTr.appendChild(alturaTd);
        pacienteTr.appendChild(gorduraTd);
        
        
x.remove(); -> remove o elemento selecionado.

x.tagName -> retornará o nome da tag selecionada em MAIÚCCULO, exemplo:

 execute document.querySelector('h1').tagName. O console te retornará o nome da tag do elemento em maiúsculo ("H1").
 
.toLowerCase(); -> deixa todas as letras minúsculas.

string.substr(numMinimo, numMaximo); -> verifica a string entre o numero x e y, exemplo:

var string = "Alura";
var resultado = string.substr(1, 4);

// lura

setInterval(nomeFuncao, tempoDeIntervalo); -> 
    Executa uma função de tanto em tanto tempo, até você definir 
    quando parar o intervalo com o clearInterval(id);
    
clearInterval(id); -> Limpa o intervalo da função setInterval
    isto é, ele para o funcionamento da mesma.
        exemplo:
            var id = setInterval(function(){
                //faz algo.
                if(esse algo chegar ao objetivo)
                    clearInterval(id); -> para o funcionamento do 
                        setInterval
            }, 1000); -> faz algo a cada 1000 milisegundos(1segundo);

Caso queria uma função que só execute UMA vez em determinado tempo, utilizamos o setTimeout, que segue quase a mesma lógica da explicação acima, porem não necessita de clearInterval, pois executará apenas uma vez.

setTimeout(nomeFuncao, tempoDeIntervalo); -> Executa uma única vez a
    a função definida, no tempo definido.
    
---------------------------- PROPRIEDADES JS ------------------------------


Não, innerHTML é uma propriedade, não uma função, então ela recebe o novo conteúdo, ou seja, utilizamos um sinal de igual (=):
document.querySelector("#alura").innerHTML = "Novo texto"

x.innerHTML -> Edita o html INTERNO de determinado elemento, exemplo:

Temos uma ul com varias li's

<ul class=".msg-erro-ul">
    <li>bla bla</li>
    <li>bla bla</li>
</ul>

var ul = document.querySelector(".msg-erro-ul");
ul.innerHTML = "";

Quando eu dou o valor em branco para meu ul, ul.innerHTML = "";, TODO o conteúdo dele será limpado.

Ficará assim 

<ul class=".msg-erro-ul">
</ul>

Utilizamos innerHTML quando queremos EDITAR alguma coisa.


---------------------------- JavaScript CSS ----------------------------

x.style.nomepropriedade = x.style.color, OBS: CASO
A PROPRIEDADE TENHA O TRACINHO - em JS nós retiramos o tracinho e deixamos o nome da propriedade em camelCase, Exemplo: x.style.backgroundColor = "red";

x.classList -> Retorna um VETOR com todas as classes do cara selecionado.
x.classList.add("nomeClasse"); -> Adiciona uma nova classe.
x.classList.remove("nomeClasse"); -> Remove a classe.

DENTRO DA classList temos o metodo .add("nomeclasse"); SEM O PONTO DA CLASSE, Pois o metodo já se refere a uma classe, que basicamente, pega o vetor de classes da classList e adiciona uma nova classe a ela.

---------------------------- Tipos de funções ----------------------------
Temos as funções nomeadas, que podemos reutilizar elas.

function nameFunction(){
}

E temos as funções anônimas, que normalmente se usa em casos específicos, que preferencialmente não se repitão novamente.

function(){}

---------------------------- Tipos de for --------------------------------


Temos o for normal.

    for(var i = 0; i < variavel.lenght; i++){
    }
    
Temos o forEach que pega um vetor e percorre ele como se fosse um for normal.

function exibeMsgErro(erros){ -> recebendo meu vetor de erros.
     var ul = document.querySelector(".msg-erro-ul"); -> selecionando a ul
    erros.forEach(function(erro){ -> criando um forEach e dizendo para cada item do meu vetor, faça algo, o parâmetro que eu passo na função, corresponde ao meu vetor erros.
    
    // E aqui eu crio uma li, adiciono conteudo a ela e uma classe, depois adiciono ela dentro da ul existente.
        var li = document.createElement("li");
        li.textContent = erro;
        li.classList.add("msg-erro");
        ul.appendChild(li);
    });
}


---------------------------- Javascript Formulário ----------------------------

var btnAdd =  document.querySelector("#adicionar-paciente");

btnAdd.addEventListener("click", function(event){
    event.preventDefalt();
    
var form = document.querySelector("seletorForm");

var nome = form.nome.value; -> Pega o valor do nome do formulário.

var peso = form.peso.value -> Pega o valor do peso do formulário.

});

form.reset(); -> limpa os dados dos campos.

---------------------------- Funções nomeadas ----------------------------

function nomeFunction(){
    alert("Oi");
}

Vantagens, caso essa função se repita mais de uma vez, é mais vantajoso fazer uma função nomeada, para poder fazer o reaproveitamento de código, Exemplo:

x.addEventListener("click", nomeFunction); -> ja executará a mensagem. 

---------------------------- Funções Anônimas ----------------------------

Creio que são feitas quando não é necessário a aparição da mesma mais de uma vez.

x.addEventListener("click", function(){ 
    alert("Ola"); 
});

---------------------------- EVENTOS JavaScript ----------------------------

IMPORTANTE!

Ele sabe que todo elemento de entrada, isto é, que recebe entrada do usuário possui a propriedade value enquanto elementos que exibem informações apenas possuem a propriedade textContent como é o caso da nossa tag span.

Previnir comportamento padrão de um evento( o botão por exemplo tem o comportamento padrão de recarregar a página ).

function(event){
    event.preventDefault();
}

no código acima, eu quero dizer para o evento, não fazer o seu comportamento padrão.

event.preventDefault(); -> previne o comportamento padrão.

event.target -> escuta e traz o evento selecionado.

click -> Ao clicar faz algo.
dblclick -> Ao clicar duas vezes faz algo.
input -> Toda vez que recebe um digito ou tira faz algo.
load -> Toda vez que a página é carregada TOTALMENTE, faz algo.
ready -> Função EXCLUSIVA do jQuery
    Assim que a página é carregada ele já executa a função, não precisa esperar imagens/videos/etc ser carregado também como é no evento de load do javascript puro.
focus -> Toda vez que um campo ganha o foco para ser digitado.

mouseenter -> Toda vez que o mouse passa em cima, ele ativa o evento.

mouseleave -> Toda vez que o mouse sai do elemento, ele ativa o evento.

---------------------------- OBJETOS JAVASCRIPT ----------------------------

Para criar um objeto basta fazer o seguinte:


 function obtemPacienteDoFormulario(form){
        //AQUI EU CRIO O OBJETO
            var paciente = {
                nome: form.nome.value,
                peso: form.peso.value,
                altura: form.altura.value,
                gordura: form.gordura.value
            }
            
            return paciente;
        }
        
Pronto, temos o objeto paciente criado, para acessar as propriedades/CARACTERISTICAS desse objeto utilizamos o .(ponto), exemplo:

var nome = paciente.nome; -> essa linha eu estou dizendo que minha variavel nome vai receber o valor da propriedade nome do objeto paciente.




---------------------------- ARRAYS JAVASCRIPT ----------------------------

Como criar um array?

var nomeVariavel = []; -> cria um array vazio.

nomeVariavel.push("alguma coisa"); -> o .push adiciona itens ao array.