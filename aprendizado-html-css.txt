******************************************************************** HTML ********************************************************************

-------------------------------- ATRIBUTOS --------------------------------

tabindex="1" -> propriedade de tag HTML, combinado com a pseudoclasse :focus no css, quando o usuário apertar tab no navegador ele pode ter a experiência de verificar os efeitos sem precisar posicionar o mouse encima(:hover) por ex.

colspan="2" -> Usado em tabelas para em vez de ocupar apenas uma cédula, ocupe 2 por exemplo.

rowspan="2" -> Quando usamos a propriedade rowspan, não precisamos colocar um <td> para aquela coluna na linha seguinte.


-------------------------------- ATRIBUTOS CUSTOMIZAVEIS --------------------------------

 recurso do HTML 5 que são os atributos customizados. A partir dessa versão do HTML, podemos criar nossos próprios atributos em qualquer elemento do HTML sem deixá-lo inválido; basta que esse atributo comece com data-. Por exemplo:

<!-- a declaração abaixo é válida a partir do HTML 5 -->
<a href="#" data-legenda="Clique em mim">Link</a>

-------------------------------- TAGS Lembrete --------------------------------

<main> -> indica conteúdo principal.
<blockquote> - indica citação.
<cite> - indica autor de citação.
<aside> - conteúdo auxiliar ao conteúdo principal, como links relacionados ao conteúdo
<article> - conteúdo que, por si só, já tem um sentido completo, como um post de um blog ou uma notícia
<header> - cabeçalho da página ou de uma região dela
<footer> - mesma ideia da tag <header> para o rodapé
<section> - parte/seção de uma página ou texto.
<nav> - indica ali existe navegação pelo site.
<time> - Usado para definir data/hora.
<table> - Cria uma tabela
<thead> - Define o Cabeçalho da tabela Mais SEMANTICO.
<tbody> - Define o corpo da tabela Mais SEMANTICO.
<tfoot> - Define o "rodape" da tabela Mais SEMANTICO.
<th> - indica o Cabeçalho.
<tr> - cria a linha da tabela
<td> - cria a coluna da tabela.
<dl> - cria a lista
<dt> - Define o Nome ou titulo
<dd> - Define a descrição desse nome ou titulo




******************************************************************** CSS ********************************************************************

-------------------------------- VERTICAL-ALIGN --------------------------------

IMPORTANTE! A propriedade vertical-align define o alinhamento vertical de um elemento.

middle ->

-------------------------------- BORDER --------------------------------

IMPORTANTE!! -> border-collapse E border-spacing É utilizado APENAS na tag <table>.

border-collapse: separate; -> separa as bordars
border-collapse: collapse; -> já é padrão vir definido como collapse(juntas);

border-spacing: 5px; -> define o tamanho do espaço entre as bordas.

-------------------------------- PROPRIEDADE DISPLAY --------------------------------

inline -> deixa elementos na mesma linha, elemenos inline não podem ter altura definida.
block -> todo elemento definido como block ocupa a linha inteira, ou seja, não deixa outro elemento ocupar a mesma linha que ele
inline-block -> podemos definir largura e altura 
none -> some com o elemento.

-------------------------------- PSEUDOELEMENTOS --------------------------------

IMPORTANTE! 
A propriedade content é exclusiva dos pseudoelementos before e after, menos que não for utiliza-lo DEVE coloca-lo junto ao seu css.

EX:

a:after{
    content: ""; <- deixe-o vazio, CASO não for utilizado, mas deve coloca-lo msm que vazio, é obrigatório, SE não o navegador não le.
}

:first-letter -> permite estilizar a primeira letra de um parágrafo por exemplo( p:firs-letter )
:before -> antes
:after -> depois

-------------------------------- PSEUDOCLASSES --------------------------------


:first-child - > seleciona o primeiro filho
:last-child - > seleciona o ultimo filho
:nth-child - > aqui podemos brincar um pouco, podemos intercalar os estilos de acordo com os parâmetros passados.
:nth-last-child -> seleciona o ultimo filho
:nth-last-of-type - seleciona o ultimo tipo de elemento.

EXEMPLO:

Generalizando: :nth-child(xn + c)

Em que:

x é a periodicidade, de quantos em quantos elementos será aplicado o estilo;
c é o ponto de partida;
n é a variável, que começa em 0 (zero).

li:nth-child(2n+1){
    color: blue;
}

<ul>
    <li>texto</li> <- estilo aplicado aqui
    <li>texto</li>
    <li>texto</li> <- estilo aplicado aqui
    <li>texto</li>
</ul>

EXEMPLO 2:

li:nth-child(2n+2){
    color: blue;
}

<ul>
    <li>texto</li> 
    <li>texto</li> <- estilo aplicado aqui
    <li>texto</li> 
    <li>texto</li> <- estilo aplicado aqui
</ul>

EXEMPLO 3:

li:nth-child(odd){ <- pegaria todos os ímpares
    color: blue;
}

li:nth-child(even){ <- pegaria todos os pares
    color: blue;
}

:nth-of-type - > seleciona por tipo de elemento.

:hover - > ao passar o mouse faz algo.
:focus
:active
:checked

-------------------------------- SELETORES AVANÇADOS CSS --------------------------------

>>>> SELETOR ~ (Seleciona DEPOIS de outros elementos): <<<<

ul ~ li{ background-color: red; } -> seleciona todos os li DEPOIS do elemento UL 

ul div ~ li { background-color: red; } -> seleciona todos os li que estão dentro do UL E que estão DEPOIS da primeira DIV
<ul>
   <div>div</div>
    <li>algo</li>
    <li>algo</li>
    <div>div</div>
    <li>algo</li>
    <div>div</div>
    <li>algo</li>
    <div>
        <li>li dentro da div</li>
    </div>
</ul>
<li>li fora do ul</li> <- Somente esse elemento será afetado pelo background.
      
>>>> SELETOR  + (IMEDIATAMENTE Depois) : <<<<

img + p{ background-color: red; }

    <img src="" alt="">
    <p></p> <- APENAS este ficaria com a cor de fundo vermelha, pois o elemento p que vem IMEDIATAMENTE DEPOIS de img é o primeiro P.
    <p></p> 
    <p></p> 
    
img + p { background-color: red;}

    <img src="" alt="">
    <div></div> <- Neste caso, tem uma div IMEDIATAMENTE APÓS a tag img, então o seletor css img + p acima não funcionará.
    <p></p> 
    <p></p> 
    <p></p> 
    
    
>>>> SELETOR  > (Seleciona os filhos somente) : <<<<

div > p -> selecionará apenas os seus filhos.

<div> <- pai
    <p>texto</p> - <- filho da div
        <blockquote> <- filho da div
            <p>aaaa</p> <- filho do bloquote
        </blockquote>
    <p>aaaa</p> <- filho da div
</div>

--------------------------- BACKGROUND GRADIENT --------------------------

IMPORTANTE! Repetimos a mesma cor duas vezes quando queremos dizer para o navegador que ela tem que ir de x porcentagem até x porcentagem,
Exemplo: red 20%, red 40%, blue 40%, blue 100%.

background-image: linear-gradient(de onde pra onde, cor porcentagem,cor porcentagem, até quantas cores quiser).

background-image: radial-gradient(ellipse at bottom left, rgba(60, 29, 61, 0.8),rgba(60, 29, 61, 0.8) 65%, #000 65%, #000 70%, transparent 70%, transparent);

background-size: 100%(width) 200px(height); caso a imagem não tenha essa altura ela quebrará em várias imagens de 200px.

background-repeat: define o tipo de repetição na imagem.

background-position: define a posição de uma imagem dentro de seu elemento pai.



-------------------------------- SOMBRAS --------------------------------

text-shadow: direita esquerda espalhamento cor;

box-shadow: direita esquerda cor OU direita esquerda borda cor.

opacity: 0~1 0 regulamos o nível de transparencia do elemento pelo opacity 0 ele fica invisivel e 1 ele fica totalmente visivel 0.5 ele fica meio termo.

-------------------------------- TRANSFORM --------------------------------

IMPORTANTE ! -> A propriedade não funciona em elementos com a propriedade display definida como inline.

transform: rotate(30deg); -> Faz com que um elemento rotacione de acordo com os graus(deg) definidos.

transform: scale(1.5); -> Aumenta ou diminui o elemento de acordo com o parâmetro, se for > 1 ele aumenta o elemento, se for < 1 ele diminui o elemento.

transform: skew(20deg) -> Entorta o elemento \ \ de acordo com os graus(deg) definidos.

transform: translate(X, Y) -> Muda o elemento de posição para qualquer lugar da tela.

Agora resta a questão: como fazer a translação? Com um pouco de trigonometria, chegamos nas seguintes fórmulas para o quanto temos que transladar na horizontal e na vertical.

Na horizontal: cos(45) * (altura - largura) + largura

Na vertical: -1 * sen(45) * altura

-------------------------------- UNIDADE DE MEDIDA --------------------------------

IMPORTANTE! -> Definir a porcentagem da fonte no html{ font-size: X ;} e NÃO DO body{}
Assim conseguimos ter total controle da propriedade font-size em TODA a PAGINA.
  
PORCENTAGEM:
    
Ao Utilizar a "unidade de medida PORCENTAGEM, ela se baseia, 
com base na largura(width) de seu elemento pai para fazer o cálculo da porcentagem.

Exemplo:

Temos uma div.pai com width de 720px;
e uma div.filha com padding de 20px e width de 250px,
SE alterarmos padding para 10% resultará em 72px de padding, pois 10%
de 720px(seu elemento pai) é 72px.
O mesmo ocorre para o width, se colocarmos 10% seu tamanho será reduzido
para 72px.

EM:

IMPORTATE ! USA A FONTE DO ELEMENTO PAI COMO REFERÊNCIA.

Calculo EM 1.25em x tamanho da fonte do elemento igual tamanho em pixels.

EX: 1.25em x 16px igual a 20px.
    1.25em X 20px igual a 25px.

REM:

IMPORTATE ! USA A FONTE DO NAVEGADOR COMO REFERÊNCIA.

Calculo REM 1.25rem x tamanho da fonte do navegador igual tamanho em pixels.

EX: 1.25rem x 16px igual a 20px.
    1.25rem X 20px igual a 25px.

A vantagem de se utilizar REM é que ele facilita a manutenção do seu código, basta alterar o tamanho da fonte no html,
e ele já redimenciosa todo o resto, isso não ocorre com pixels.

Tem um porem, rem faz a medida com base na ALTURA da fonte, será que você quer por exemplo, definir a LARGURA de um elemento,
com base na ALTURA da fonte?

CH:

CH seria a medida da largura do caracter "zero".


RESUMO DAS MEDIDAS:

PX é sempre px

EM é medido com base na fonte do seu elemento pai.

REM é medido com base na fonte do navegador.

CH tem como base a largura do caractere zero da fonte usada;

PORCENTAGEM tem como base ou a largura do elemento pai ou o font-size do elemento anterior.


PIXEL É UMA MEDIDA ABSOLUTA, EM REM CH % São medidas RELATIVAS.

-------------------------------- FLOAT --------------------------------

OBS: Flutua um elemento porem o mantem na mesma linha de posição original,
qualquer elemento que esteja abaixo de um elemento com float, ficará lado a lado,
a menos que se use a propriedade CLEAR, para limpar a flutuação.

left -> flutua um elemento a esquerda.

right -> flutua um elemento a direita.

-------------------------------- CLEAR --------------------------------

right -> limpa a flutuação a direita.

left -> limpa a flutuação a esquerda.

both -> limpa a flutuação de ambos.

-------------------------------- POSITION --------------------------------

Absolute -> Posição Absoluta com relação a janela, ou a algum elemento em tordo dele com o valor definido como relativo.

Relative -> Posicionamento será relativo ao local atual do elemento na tela.

Fixed -> Será fixo com relação a tela.

-------------------------------- TEXT-INDENT --------------------------------

