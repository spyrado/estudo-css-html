/***** O que é GULP? *****/

    GULP é um automatizador de tarefas para front end.


https://gulpjs.com/

----------- HTTP ARCHIVE -----------

    https://httparchive.org/ ->  O HTTP Archive rastreia como a Web é criada.


----------- IMAGEM TEM UM PESO? -----------
    Sim, em um web site, toda imagem tem seu peso, é importante minificalas com programas
    ou recursos web, exemplo:
        Aplicativo Desk para minificar imagens: ImageOptim
        Pagina web para minificar imagens: https://tinypng.com/

    Dependendo do site eles só minificam um tipo de extensão, procure pela extensao
        sua extensao desejada...(.png, .jpeg, .svg e etc)

----------- INSTALANDO GULP -----------

npm init -> instala o package.json (caso voce já tenha o package n é necessário instala-lo )
    de enter para todas as perguntas e YES no final.’

    --- Porque é necessário instalar o package.json? ---

        Porque é lá que ficara listado todas as dependencias do seu projeto,
        em package.json:
        "devDependencies": {
            "gulp": "^3.9.0"
        }

        e se for necessário futuramente configurar todas as dependencias NOVAMENTE,
        é só excluir a pasta node_modules e dar
            npm install
        que o package.json identifica TODAS AS DEPENDENCIAS e baixa pra voce..
        isso facilita e MUITO a vida.

Após dar um init, instale de fato o gulp
    npm install gulp@3.9.0 --save-dev

Após instalar, para iniciar o gulp configure no package.json a chamada dele,
    vá em scripts e adicione esse script:
        "scripts": {
            "gulp": "gulp"
        },
    Ficará assim:
        "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1",
            "gulp": "gulp"
        },
Agora sim podemos iniciar o gulp:
    npm run gulp
Vai gerar um erro: No gulpfile found
    Vamos ter que criar o arquivo gulpfile.js NA RAIZ DO PROJETO.
Ele vai gerar outro erro: Task 'default' is not in your gulpfile
    Isso é porque nosso gulpfile.js não está programado para executar nenhuma tarefa.

----------- CONFIGURANDO GULPFILE.JS -----------

Para começarmos a usar o Gulp, temos que importar o gulp, para começar a utiliza-lo
    dentro do arquivo gulpfile.js, então.. lá no arquivo gulpfile.js vamos importar
    o Gulp:
        var gulp = require('gulp'); -> o nome gulp é o nome da pasta que 
            está em node_modules, se fosse gulp-antigo, voce colocaria no require
            require('gulp-antigo').
Feito isso temos nosso Objeto gulp criado, e podemos trabalhar em cima dele agora.

    -- Configurando gulp-imagemin no gulpfile.js --

Vá até o arquivo gulpfile.js, e inclua a chamada para o imagemin:
    var gulp = require('gulp'),
    imagemin = require('gulp-imagemin');

----------- TRABALHANDO COM GULP -----------

Após seguir os passos de instalação/configuração.. 
    voce DEVE TER O objeto gulp criado já, então vamos começar a trabalhar com ele.

gulp.src('caminhoPasta') -> indica o caminho de origem para trabalhar.

???? -> porem entre o src e o dest, tem que ter um plugin para modificar 
    os itens do SRC, e jogar no DEST
    Vamos utilizar o plugin gulp-imagemin
        npm install gulp-imagemin@2.3.0 --save-dev
    ver como configura-lo em "Configurando gulp-imagemin no gulpfile.js"

Feito isso.. agora seu codigo vai ficar assim:
    gulp.src('caminhoPasta')
        .pipe(imagemin());

gulp.dest('caminhoPasta') -> grava os dados trabalhados no caminho indicado de destino.


---- PORQUE PIPE? ----
    Pipe faz a ligação dos plugins com a origem e destino (src e dest),
    o código ficaria assim:
         gulp.src('caminhoPasta')
        .pipe(imagemin())
        .pipe(gulp.dest('caminhoPasta'));
    Nesse trecho eu estou falando o seguinte.. pega os arquivos do caminho X,
    dou um pipe(tubo) para ele saber por onde deve passar.. ai eu falo..
    dentro do pipe(tubo) vc vai primeiro passar pelo meu plugin de otimizacao de imagens
    e depois eu dou um pipe novamente e falo pra onde essas imagens já otimizadas vão..


Então.. criamos nossa task(tarefa) para que o gulp consiga identificar
qual tarefa ele deve rodar:

    gulp.task('nomeTask',function(){
        gulp.src('src/img')  <-- tarefas que essa task irá executar..
            .pipe(imagemin())
            .pipe(gulp.dest('src/img'));
    });

feito isso chamamos nossa task via:
    npm run gulp nomeTask

Porem vai minificar 0 arquivos.. pois estamos pedindo pra minificar
    'imagem da pasta img, e n os seus arquivos.

Para conseguir minificar todos os arquivos de todas as pastas que estão em img,
    fazemos o seguinte, utilizamos um padrão chamado de.. GLOB PATTERN, ficaria assim:
        gulp.src('src/img/**/*').
    ** -> TODOS OS DIRETORIOS
    * -> TODOS OS ARQUIVOS DENTRO DOS DIRETORIOS



    --- GLOB PATTERN ---
        In computer programming, glob patterns specify sets of filenames with wildcard
        characters. For example, the Unix command mv *.txt textfiles/ moves (mv) all files 
        with names ending in .txt from the current directory to the directory textfiles. 
        Here, * is a wildcard standing for "any string of characters" and *.txt is a 
        glob pattern. The other common wildcard is the question mark (?), which stands 
        for one character.

----------- OTIMIZAÇÕES DE IMAGENS -----------

    É IMPORTANTE resaltar.. se uma imagem for otimizadas mais de uma vez, 
    ela irá perder a qualidade, e começar a ficar perceptivel a perca
    de qualidade, o ideal é, que quem for alterar essa imagem, sempre tenha em maos,
    o backup da imagem original, e sempre alterar a imagem original, e subistituir,
    a imagem anterior do projeto pela original, que ai a imagem do projeto, sempre será
    otimizada apenas uma vez.
        EXEMPLO:
            img/imgprojeto.png
            designer -> backupImgProjeto.png
    o designer nunca deve alterar uma imagem que já está no projeto, sempre o seu backup
    e após isso incluir a imagem backup no projeto.

----------- DEPENDENCIAS DE TAREFAS -----------

/* Copia tudo da pasta src, e joga dentro de dist */
gulp.task('copy', ['clean'],function(){
    gulp.src('src/**/*')
        .pipe(gulp.dest('dist')); // Caso n tenha dist, ele cria a pasta dist
});

/* Remove a pasta dist */
gulp.task('clean', function(){
    gulp.src('dist')
        .pipe(clean());
});

Na task copy, como segundo parametro dentro de um vetor, eu chamo as dependencias dessa
    tarefa, ali eu quero dizer o seguinte remove a pasta dist PRIMEIRO, depois da um copy
    da src para a dist, POREM o GULP é assincrono, ou seja ele executa as t
    
----------- COMO TORNAR TAREGAS SINCRONAS? -----------

Dando um return na funcionalidade que voce quer que execute primeiro voce diz ao gulp
    ele irá retornar seu stream sinalizando para o gulp que essa tarefa depende da outra,
    Resumingo.. o gulp entende que deve esperar aquela task finalizar para começar
    a outra task.

var gulp = require('gulp'),
    imagemin = require('gulp-imagemin');
    clean = require('gulp-clean');

/* Copia tudo da pasta src, e joga dentro de dist */
gulp.task('copy', ['clean'],function(){
    console.log('Copiando src e jogando e dist...');
    return gulp.src('src/**/*')
        .pipe(gulp.dest('dist')); // Caso n tenha dist, ele cria a pasta dist
        // AQUI EU RETORNO A DEPENDENCIA DE COPY
});

/* Remove a pasta dist */
gulp.task('clean', function(){
    console.log('Removendo diretorio Dist...');
    return gulp.src('dist')
        .pipe(clean()); // AQUI EU RETORNO A DEPENDENCIA DE CLEAN
});

/* Minifica imagens da pasta dist (distribuição) */
gulp.task('build-img', ['copy'],function(){
    console.log('Minificando imagens...');
    gulp.src('dist/img/**/*')
        .pipe(imagemin())
        .pipe(gulp.dest('dist/img'));
});

Nesse caso a task 'copy', depende de clean, e a task 'build-img', depente de 'copy'.
    como eles tem DEPENDENCIAS, as dependencias devem retornar suas dependencias.

----------- PLUGINS GULP -----------

-- Automatizar Concatenação de arquivos --

    Link ref: https://www.npmjs.com/package/gulp-concat
    npm install gulp-concat@2.6.0 --save-dev

-- Automatizar troca de nome de arquivos --

    Link ref: https://www.npmjs.com/package/gulp-html-replace#usage
    npm install gulp-html-replace@1.5.4 --save-dev

-- Exclui um diretoio/pasta  --

    Link ref: https://www.npmjs.com/package/gulp-clean
    npm install gulp-clean@0.3.1 --save-dev

    gulp.task('clean', function(){
        gulp.src('dist')
            .pipe(clean());
    });

    no caso acima, ao executar npm run gulp clean,
        ele irá remover a pasta dist.

-- Automatizar minificação de arquivos js --
    
    link ref: https://www.npmjs.com/package/gulp-uglify
    npm install gulp-uglify@1.4.1 --save-dev

    gulp.task('build-js', function(){
        console.log('Gerando arquivo all.js');
        gulp.src(['./dist/js/jquery.js','./dist/js/home.js','./dist/js/produto.js'])
        .pipe(concat('all.js'))
        .pipe(uglify())
        .pipe(gulp.dest('dist/js'));
    });

    o src será os que eu defini e na ordem que eu defini dentro do vetor.
    vou concatenar eles em all.js, e vou minificar eles com uglify após isso
    eu coloco ele no diretorio final.

-- Automatizar minificação de arquivos css --
    
    link ref: https://www.npmjs.com/package/gulp-cssmin
    npm install gulp-cssmin@0.1.7 --save-dev

-- Automatizar link de tags / minificação de arquivos --
    
    link ref: https://www.npmjs.com/package/gulp-usemin
    npm install gulp-usemin@0.3.14 --save-dev

    EXEMPLO DE USO, ARQUIVO PRODUTO.HTML:

    <!-- build:css css/produto.min.css -->
    <link rel="stylesheet" href="css/reset.css">
    <link rel="stylesheet" href="css/estilos.css">
    <link rel="stylesheet" href="css/mobile.css">
    <link rel="stylesheet" href="css/produto.css">
    <!-- endbuild -->

    <!-- build:js js/produto.min.js -->
    <script src="js/jquery.js"></script>
    <script src="js/produto.js"></script>
    <!-- endbuild -->

    gulpfile.js:

    gulp.task('usemin', function(){
    
    gulp.src('dist/**/*.html')
        .pipe(usemin({
            'js': [uglify],
            'css: [cssmin]
        }))
        .pipe(gulp.dest('dist'));
    });

    estou dizendo para pegar todos os arquivos .html do projeto,
    identificar as palavras chaves de cada arquivo build:js ou build:css nesse caso,
    e para cada um minificar utilizando o plugin passado dentro do vetor e jogar na
    pasta dist.

    OBS: O usemin já pega por padrao ele já pega os arquivos e concatena, na ordem
    em que estão no html, ai vc passa o plugin para minifica-los.



-- Automatizar minificação de arquivos --
    
    link ref: https://www.npmjs.com/package/gulp-uglify
    npm install gulp-usemin@0.3.14 --save-dev

    gulp.task('usemin', function(){
    
    gulp.src('dist/**/*.html')
        .pipe(usemin({
            'js': [uglify],
            'css: [cssmin]
        }))
        .pipe(gulp.dest('dist'));
    });

    estou falando pegue todos os arquivos .html,
    minifica as tags que marquei nesse caso js/css, e dentro do vetor,
    eu passo os plugins que o usemin vai utilizar para minificar os arquivos,
    e depois eu falo salva tudo isso em dist.

-- Automatizar Atualização do browser ao salvar um arquivo --

    link ref: https://www.npmjs.com/package/browser-sync
    npm install browser-sync --save-dev

    temos que fazer algumas configurações para funcionar corretamente.

    gulp.task('server',function(){

        browserSync.init({
            server: {
                baseDir: 'src'
            }
        });

        gulp.watch('src/**/*').on('change', browserSync.reload);
    });

    inicio o servidor com browserSync.init()
    configuro ele   {
                        server: {
                            baseDir: 'src'
                        }
                    }
    falo que em server, o diretório raiz é o meu src

    após isso uso uma funcionalidade padrão go gulp, que é o watcher
        gulp.watch('nomeDaPasta a ser observada').on('eventoAserObeservado', funcao);
        gulp.watch('src/**/*').on('change', browserSync.reload);
    Estou dizendo, toda vem q os arquivos de src/**/* mudarem('change'), executa a funcao
    browserSync.reload

    -- Automatizar verificações de sintax no javascript --

    link ref: https://www.npmjs.com/package/gulp-jshint
    npm install gulp-jshint@1.11.2 --save-dev

    plugin adicional para deixar mais bonito o reports do jshint
        npm install jshint-stylish@2.0.1 --save-dev;

    /* Inicia um servidor que, a cada alteração nos arquivos, ele vai atualizar o browser
        tem um plugin adicional, que fica verificando os erros no javascript
    */
    gulp.task('server',function(){

        browserSync.init({
            server: {
                baseDir: 'src'
            }
        });

        /*Vericando se todos meus arquivos js ao dar um change, eu disparo um evento
        e pego o nome do arquivo(event.path) depois dou um pipe com o nome do plugin,
        para verificar erros no javascript, e peço para o plugin me reportar o erro,
        dando um pipe com jshint.reporter, depois passo um plugin pra deixar mais
        bonitinho a saida dos erros no console jshint.reporter(jshintStylish) */

        gulp.watch('src/js/*.js').on('change', function(event){
            gulp.src(event.path)
                .pipe(jshint())
                .pipe(jshint.reporter(jshintStylish));
        });

        gulp.watch('src/**/*').on('change', browserSync.reload);
    });

    -- Automatizar verificações de sintax no CSS --
    
    link ref: https://www.npmjs.com/package/gulp-csslint
    npm install gulp-csslint@0.2.0 --save-dev

    funciona da mesma forma que o jshint:

    gulp.watch('src/css/*.css').on('change', function(event){
        gulp.src(event.path)
            .pipe(csslint())
            .pipe(csslint.reporter());
    });


----------- TASK DEFAULT GULP -----------

    Ao nomear uma task como default, o gulp entende que ao dar o comando
        npm run gulp 
    ele já deve buscar pela task default, e executar oq foi passada pra ela,
    exemplo:
        /* Exucuta todas as minhas tarefas, copy com dependencia 
        E o restante assincronamente, isso é.. vao rodar ao msm tempo, pois 
        eles não dependem do outro */
        gulp.task('default',['copy'], function(){
            
            gulp.start('build-img','build-js', 'build-html');
        });