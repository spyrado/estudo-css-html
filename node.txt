----- NVM(NODE VERSION MANAGER) GERENCIADOR DE VERSÕES DO NODE ----

NVM -> Node Version Manager
  ele gerencia o versionamento de Node

-- Comandos --

nvm list -> lista as versoes de node que voce possui
nvm install 8.16.0 64 -> instala o node na versao que voce definiu, nesse caso foi 8.16.0 x64(windows)
nvm uninstall 8.10.0 -> desintala a versao do node que voce especificou.
nvm use 10.0.0 -> troca para a versao que vc especificou, no caso foi a versao 10.0.0.


********************************  NODE JS ********************************

-- MODULOS --
  Todo arquivo em node .js é um MODULO.

-- IMPORTANDO MODULOS --

  Basta seguir essa sintax: require('NOME_DO_MODULO');
  Para receber todas as funções desse modulo fazemos o seguinte:

    const http = require('http'); -> http irá receber uma referencia de todo o conteudo 
      do modulo http importado

-- CRIANDO UM SERVIDOR( DE FORMA CRUA ( SEM FRAMEWORK ) ) --

Para ENTENDER o código abaixo, e o porque ele funciona, devemos saber que:
  O Cliente(Browser), faz a requisição para o servidor e o servidor, devolve uma resposta.
  no caso eu acessei pelo meu cliente(Google Chrome)localhost:3000 -> e estava esperando
  uma resposta do servidor, e no código eu devolvi a resposta de um corpo html com um titulo

const http = require('http'); // importo o modulo http

const servidor = http.createServer((req,res) => {

  let html = '';

  if(req.url == '/'){ // Se cair na raiz, exibo a pagina principal
    html = `
        <html>
            <head>
                <meta charset="utf-8">
            </head>
            <body>
                <h1> Casa do Código </h1>
            </body> 
        </html>
    `;
  }else if(req.url == '/livros'){ // Se cair em livros, exibo a pagina de livros
    html = `
        <html>
            <head>
                <meta charset="utf-8">
            </head>
            <body>
                <h1> Listagem de Livros </h1>
            </body> 
        </html>
    `;
  }
  res.end(html); // envio a resposta referente ao html em questão.
}); // crio um servidor
servidor.listen(3000) // digo ao servidor para rodar na porta 3000


-- CALLBACK --

  O Node trabalha muito com callbacks, createServer é uma das funções que recebe um callback
  como parametro, ele só será chamado se atender a determinada condição.


-- Criando um node package manager --

  npm init -> isso faz com que o projeto se torne parte do node.


********************************  EXPRESS FRAMEWORK ********************************

-- Instalando o FRAMEWORK EXPRESS --

  npm install express@4.16.3 --save-exact -> ira instalar exatamente essa versão do express

-- Estrutura de pastas --

src
  app -> armazenar código restrito a lógica da aplicação
  config -> armazenar código de configurações da nossa aplicação.

--- Criando servidor com EXPRESS ---

const express = require('express');
const app = express(); // express retorna uma função, vc deve executa-la para pegar todo o módulo

app.listen(3000, function(){ // abre um servidor na porta 3000
  console.log('Servidor iniciado.'); 
})

--- ROTAS ---

ERRO: Cannot GET / -> Se aparecer isso é porque não tem uma rota configurada para a raiz nesse caso.

--- Atualizando mudanças no servidor automaticamente  NODEMOM ---

  npm install nodemon@1.18.4 --save-dev --save-exact -> --save-dev pq eu preciso desse plugin APENAS durante o 
    desenvolvimento da aplicação nao utilizarei a atualizacao automatica em ambiente de prod.

  npm install -g nodemon@1.18.4 --save-exact -> instalamos com -g para que esteja disponivel tambem
    no console os comandos

  -- Como iniciar o servidor? --
    nodemon nomeDoArquivo.js

    E agora é alterar qualquer coisa, que ele se encarrega de identificar e restartar o servidor.

--- Gerando templates com MARKO.js ---

  https://markojs.com/

  npm install marko@4.13.4-1 --save-exact

  Configurando Marko para trabalhar junto ao express:
    //Aqui configuramos as 2 linhas necessarias
    require('marko/node-require').install();
    require('marko/express');

    const express = require('express');
    const app = express();

adicionando ao npm start --ignore *.marko.js
//Assim ele ignora os arquivos de marko, e o servidor n fica atualizando atoa, dando conflito e etc 
"start": "nodemon server.js --ignore *.marko.js"

--- Instalando banco de dados sqlite3 ---

npm install sqlite3@4.0.6 --save-exact