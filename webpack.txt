******************************* WebPack *******************************

---- Getting started ----

Primeiro, instalaremos o WebPack:
	npm install webpack

Após instalarmos, deveremos criar o arquivo, webpack.config.js dentro da pasta raiz da nossa aplicacao,
e fazer a seguinte configuração:

const path = require('path'); -> modulo do proprio node para gerenciar path.

module.exports = {
  entry: './app-src/app.js', -> modulo inicial que resolverá as outras dependencias de modulos.
  output: {
    filename: 'bundle.js', -> nome do arquivo gerado pelo webpack
    path: path.resolve(__dirname, 'dist'), -> nome da pasta e local onde ela será gerada (explicacao em Significado das propriedades)
  },
  module: {
    rules: [
      {
        test: /\.js$/, -> extensoes de arquivos que o webpack deve considerar na hora de trabalhar
        exclude: /node_modules/, -> arquivos ou pastas que o webpack deve excluir do seu work flow
        use: { -> peco para ele usar meu loader
          loader: 'babel-loader' -> aqui eu passo o loader que eu quero que ele use, esse loader vai buscar as configs necessárias em .babelrc
        } 
      }
    ]
  },
	plugins
};

---- Significado das propriedades ----

entry -> deve indicar qual é o modulo inicial a ser carregado pela aplicacao (importante: é apartir dele que o webpack
	irá identificar todas as outras dependencias).

output -> para onde vai ser a saida de toda a compilacao do webpack.
	-- filename -> nome do arquivo gerado pelo webpack.
  -- path -> nome da pasta que será criada e que irá qualquer o filename.

module -> SEMPRE IRÁ VERIFICAR SE EXISTE MODULOS, EXECUTALOS PARA AI SIM GERAR O BUILD FINAL.
  Onde carregamos intermediadores, normalmente loaders, que consigam traduzir por exemplo: um decorator, para javascript
	e assim o webpack reconhecerá esse arquivo e buildara ele normalmente.
	-- rules[] -> é dentro de rules que criamos nossos objetos com as regras que farao o webpack ler,
		antes de compilar.

plugins -> SEMPRE EXECUTARÁ AO FINAL DO BUILD, exemplo, apos gerar nosso arquivo bundle.js, o plugin entrará,
	em acao para fazer o papel dele, um exemplo:
	o webpack gera o bundle.js e apos gerar, aciona o plugin do babel para minificar esse arquivo.

path.resolve -> nele passamos __dirname (nome do diretorio pai), e 'dist', diretorio que será criado dentro do diretorio pai
	exemplo: se meu diretorio pai se chama 'client' quando eu fizer isso path.resolve(__dirname, 'dist'), o resultado final,
	da compilacao do webpack será client/dist e dentro de /dist terá o seu filename, geralmente chamado de bundle.js, entao ficaria
	client/dist/bundle.js


------ Como identificar se é build de prod -----

Controlamos isso via NODE_ENV=production.

Com isso podemos adicionar coisas que só estariam em cenário de prod, configuramos no webpack.config.js:
	if(process.env.NODE_ENV == 'production') {
		plugins.push(new babiliPlugin());
	}

E em package.json adicione em "scripts":
"build-prod": "NODE_ENV=production  webpack --config webpack.config.js"

porem para esse NODE_ENV funcionar em todas as plataformas precisamos instalar o cross-env,
	npm install cross-env@5.0.1 --save-dev
	e adicionar ele no script: "build-prod": "cross-env NODE_ENV=production  webpack --config webpack.config.js"
	e pronto agora ele funciona para todas as plataformas.