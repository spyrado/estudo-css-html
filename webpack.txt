******************************* WebPack *******************************

---- Getting started ----

Primeiro, instalaremos o WebPack:
	npm install webpack

Após instalarmos, deveremos criar o arquivo, webpack.config.js dentro da pasta raiz da nossa aplicacao,
e fazer a seguinte configuração:

const path = require('path'); -> modulo do proprio node para gerenciar path.

module.exports = {
  entry: './app-src/app.js', -> modulo inicial que resolverá as outras dependencias de modulos.
  output: {
    filename: 'bundle.js', -> nome do arquivo gerado pelo webpack
    path: path.resolve(__dirname, 'dist'), -> nome da pasta e local onde ela será gerada (explicacao em Significado das propriedades)
  },
  module: {
    rules: [
      {
        test: /\.js$/, -> extensoes de arquivos que o webpack deve considerar na hora de trabalhar
        exclude: /node_modules/, -> arquivos ou pastas que o webpack deve excluir do seu work flow
        use: { -> peco para ele usar meu loader
          loader: 'babel-loader' -> aqui eu passo o loader que eu quero que ele use, esse loader vai buscar as configs necessárias em .babelrc
        } 
      }
    ]
  },
	plugins
};

---- Significado das propriedades ----

entry -> deve indicar qual é o modulo inicial a ser carregado pela aplicacao (importante: é apartir dele que o webpack
	irá identificar todas as outras dependencias).

output -> para onde vai ser a saida de toda a compilacao do webpack.
	-- filename -> nome do arquivo gerado pelo webpack.
  -- path -> nome da pasta que será criada e que irá qualquer o filename.

module -> SEMPRE IRÁ VERIFICAR SE EXISTE MODULOS, EXECUTALOS PARA AI SIM GERAR O BUILD FINAL.
  Onde carregamos intermediadores, normalmente loaders, que consigam traduzir por exemplo: um decorator, para javascript
	e assim o webpack reconhecerá esse arquivo e buildara ele normalmente.
	-- rules[] -> é dentro de rules que criamos nossos objetos com as regras que farao o webpack ler,
		antes de compilar.

plugins -> SEMPRE EXECUTARÁ AO FINAL DO BUILD, exemplo, apos gerar nosso arquivo bundle.js, o plugin entrará,
	em acao para fazer o papel dele, um exemplo:
	o webpack gera o bundle.js e apos gerar, aciona o plugin do babel para minificar esse arquivo.

path.resolve -> nele passamos __dirname (nome do diretorio pai), e 'dist', diretorio que será criado dentro do diretorio pai
	exemplo: se meu diretorio pai se chama 'client' quando eu fizer isso path.resolve(__dirname, 'dist'), o resultado final,
	da compilacao do webpack será client/dist e dentro de /dist terá o seu filename, geralmente chamado de bundle.js, entao ficaria
	client/dist/bundle.js


------ Como identificar se é build de prod -----

Controlamos isso via NODE_ENV=production.

Com isso podemos adicionar coisas que só estariam em cenário de prod, configuramos no webpack.config.js:
	if(process.env.NODE_ENV == 'production') {
		plugins.push(new babiliPlugin());
	}

E em package.json adicione em "scripts":
"build-prod": "NODE_ENV=production  webpack --config webpack.config.js"

porem para esse NODE_ENV funcionar em todas as plataformas precisamos instalar o cross-env,
	npm install cross-env@5.0.1 --save-dev
	e adicionar ele no script: "build-prod": "cross-env NODE_ENV=production  webpack --config webpack.config.js"
	e pronto agora ele funciona para todas as plataformas.

------ Criando seu servidor local com WebPack ------

  npm install webpack-dev-server@2.5.1 --save-dev

------ Loaders ------

module: {
  rules: [
    {
      test: /\.js/,
      exclude: /node_modules/,
      use: {
        loader: 'babel-loader'
      } 
    }
  ]
},

  São normalmente caras que que fazem o intermedio de um js ou css para algo, exemplo:
    transpilar o novo js para dar compatibilidade aos navegadores antigos, utilizamos o babel-loader,
    para que ele faca a ponte entre .babelrc e o webpack.config.js
      npm install babel-loader

    podemos transformar css em módulos, permitindo que cada css seja específico daquela pagina.
      npm install css-loader@0.28.4 style-loader@0.18.2 --save-dev

    tudo isso usamos os loaders para fazer esse trabalho ANTES de compilar de fato.

--- css-loader ---
  Ele pega o css, converte para JSON, para que todos os outros loaders tenham acesso ao css já configurado.

-- style-loader --
  Ele pega esse css convertido em JSON pelo css-loader, e compila ele e deixa ele todo inline lá na tag style do index.html
  igual/similar ao que o angular faz no seu modo de producao.
    
--- Configuracao de um loader ---
  É IMPORTANTE ressaltar que quando usamos mais de um loader, ele carrega sempre de baixo para cima... essa é a ordem..
    entao caso um loader dependa do outro, deixe ele na ordem de dependencia.
    module: {
    rules: [
      {
        test: /\.css$/,
        use: [
          // style-loader
          { loader: 'style-loader' },
          // css-loader
          {
            loader: 'css-loader',
            options: {
              modules: true
            }
          },
        ]
      }
    ]
  },

  -- instalando mais loaders para lidar com os tipos de fonts do bootstrap --
    Com essas configuracoes, o webpack entende que arquivo de font la do bootstrap deve ficar na raiz da pasta /dist
    pois ele é um arquivo que será usado para que o css possa localizar e chama-las.
    npm install url-loader@0.5.9 file-loader@0.11.2 --save-dev

    regras de configuracao:
      { 
        test: /\.(woff|woff2)(\?v=\d+\.\d+\.\d+)?$/, 
        loader: 'url-loader?limit=10000&mimetype=application/font-woff' 
      },
      { 
        test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/, 
        loader: 'url-loader?limit=10000&mimetype=application/octet-stream'
      },
      { 
        test: /\.eot(\?v=\d+\.\d+\.\d+)?$/, 
        loader: 'file-loader' 
      },
      { 
        test: /\.svg(\?v=\d+\.\d+\.\d+)?$/, 
        loader: 'url-loader?limit=10000&mimetype=image/svg+xml' 
      }   

---- FOUC ----

Isto ocorre devido ao fouc, (flash of unstyled content, ou seja, flash de um conteúdo não estilizado), 
o que não deveria acontecer em uma aplicação. O problema é que se analisarmos o arquivo bundle.js da pasta dist, 
veremos que os arquivos CSS foram adicionados automaticamente. Todo arquivo CSS gerada, o Webpack agrupou em um único Bundle 
arquivos de diferentes extensões.

const extractTextPlugin = require('extract-text-webpack-plugin');

let plugins = []

// ADICIONANDO O PLUGIN,
// MAIS ABAIXO, MODIFICAÇÃO DO LOADER

plugins.push(
    new extractTextPlugin("styles.css")
);

npm install extract-text-webpack-plugin@3.0.0 --save-dev

test: /\.css$/,
 use: extractTextPlugin.extract({
     fallback: 'style-loader',
     use: 'css-loader'
 })


---- IMPORTANDO SCRIPTS ----

App.js
  import 'jquery/dist/jquery.js';
  import 'bootstrap/js/modal.js';

Ao importar o jquery em um modulo, o modal.js nao consegue visualizar o jquery, pois o jquery deve pertencer ao escopo global.

para colocar o Jquery em um escopo global, vc deve fazer o seguinte:

va ate o arquivo webpack.config.js e faca a seguinte configuracao:

const webpack = require('webpack');

let plugins = [];

plugins.push(new webpack.ProvidePlugin({
  '$': 'jquery/dist/jquery.js',
  'jQuery': 'jquery/dist/jquery.js'
}));


---- PLUGINS ----

- //puglin que otmiza o build de producao. (Scope Hoisting)
  plugins.push(new webpack.optimize.ModuleConcatenationPlugin());

-  // aqui vou configurar para que o webpack compile todas as bibliotecas de terceiros e deixe em um arquivo separado
  plugins.push(
    new webpack.optimize.CommonsChunkPlugin({ 
      name: 'vendor', 
      filename: 'vendor.bundle.js'
  })); 
  module.exports = {

    entry: {
        app: './app-src/app.js',
        vendor: ['jquery', 'bootstrap', 'reflect-metadata'] -> aqui vc indica para o vendor quais devem ser carregados.
    },

  E detalhe, ao indicar os scripts no array, vc n precisa mais importa-los no codigo, basta apenas importar o vendor.bundle.js

- npm install html-webpack-plugin@2.29.0 --save-dev -> faz com que seja possível remover os scripts e links da index.html


plugins.push(new HtmlWebpackPlugin({
  hash: true, -> o hash irá invalidar o cash, ou seja sempre que um arquivo for gerado ele vai ter um hash diferente.
}));


-------- Lazy Loading e Code Spliting --------

  COM WEBPACK BASTA USARMOS System.import ou import para carregarmos dinamicamente os conteudos.

 - O proprio webpack quando voce passa as instrucoes para ele, ele ja faz o lazy e o code spliting daquele arquivo.
  exemplo: 
    async importaNegociacoes() {
        try {
            const { NegociacaoService } = await System.import('../domain/negociacao/NegociacaoService.js');
            const service = new NegociacaoService();

  Nessa funcao asyncrona eu digo para esperar para importar um modulo ( NegociacaoService ) esse módulo só será carregado
   quando essa funcao(importaNegociacoes) for chamada, e uma vez que ela for chamada o webpack é inteligente para nao buscar
   o import novamente, ele já vai saber que foi importada..

   na arquitetura fica dessa forma os arquivos:
    0-bundle.js -> seria o conteudo de System.import('../domain/negociacao/NegociacaoService.js');
    e seria um arquivo a parte que só será chamado pelo navegador caso aconteca o import.
    isso minifica o bundle de certa forma, e melhor a performance da aplicacao.


----- Como adicionar enviroments com wepack? -----
let SERVICE_URL = JSON.stringify('http://localhost:3000');

if (process.env.NODE_ENV == 'production') {

  SERVICE_URL = JSON.stringify('http://endereco-da-sua-api');

}

plugins.push(new webpack.DefinePlugin({ SERVICE_URL }));

Exemplo: obtemNegociacoesDaSemana() {

        return this._http
            .get(`${SERVICE_URL}/negociacoes/semana`)

Dessa forma o toda variavel que tenha SERVICE_URL o webpack vai converter para o estado atual da aplicacao (dev ou prod)