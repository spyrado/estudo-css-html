*********************** INSTALANDO SEU PROPRIO RUNNER ***********************
  Por padrao no gitlab vc tem 400minutos de uso do Runner deles, para eliminar isso configure o seu proprio runner
  
  siga os passos abaixo:

  Video de referencia: https://www.youtube.com/watch?v=2MBhxk2chhM

  Today we will learn
	What is GitLab Runner
	How to install GitLab runner
	How to register GitLab runner
	How to start GitLab runner

	- used in GitLab CI
	    - Open source continuous integration service included with GitLab
	- used to run jobs & send results back to GitLab

	Step 1: Install GitLab Runner
	   https://docs.gitlab.com/runner/
	   https://docs.gitlab.com/runner/instal...

	gitlab-runner.exe install
	gitlab-runner --version

	Step 2: Register GitLab Runner
	  (process to bind runner with gitlab instance)
	https://docs.gitlab.com/runner/regist...
	gitlab-runner.exe register

	Step 3: Start GitLab Runner
	gitlab-runner.exe start

	Step 4: Check runner is started in the project

IMPORTANTÍSSIMOOOOO: -----> SEMPRE LEMBRE DE COLOCAR A VERSÃO DA LIB/FRAMEWORK que vc está 
	instalando, pois o yml, não sabe identificar as libs avulsas que vc coloca para teste,
	exemplo.... 

	npm install wait-on -> se eu n coloco a versao aqui, o dia que o dono dessa lib, fizer um BREAK-CHANGE
		meu pipeline vai quebrar também, então sempre mantenha a versão que foi testada..

	JEITO CERTO:	npm install wait-on@^2.1.0 
		ASSIM eu GARANTO que meu pipeline sempre vai funcionar com a versão certa e sem BREAK CHANGE

*********************** JOBS ***********************

Jobs podem ser nomeados como você desejar, porem evite nomea-lo com palavras reservadas.
	jobs obrigatóriamente devem contem um script abaixo dele.
Exemplo de um Job:
	job1:
		script: xpto

	meu primeiro job:
		script: xpto


Cada job é uma espécie de container, e um job não guarda a referente para a execução do proximo job
	temos que usar o cache nesse caso


*********************** SCRIPT ***********************

 -> O script é onde conseguimos falar para o docker o que queremos executar dentro daquele ambiente.
  exemplo...
		instalando angular e gerando build de prod:
			script: 
				- cd indo_para_o_package.json_do_angular/etc
				- npm install
				- npm run build:prod

image: -> ao trabalhar no ambiente docker podemos pegar algumas "imagens" que precisamos..
	um bom exemplo é que se eu tentar executar um npm install como script, ele não rodará pois, tem a dependencia
	do node para executálo.
	e o docker fornece imagens dessas dependencias para que ele consiga instalar essa dependencia e dar sequencia 
	nos scripts.
	EXEMPLO: https://hub.docker.com/search?q=node&type=image
		// Aqui eu estou falando instala o node pegando a imagem que o docker nos fornece ( site acima )
		// e executa esse job (construir site) e execute todos os scripts dentro dele.
		image: node
		construir site:
			script:
				- cd website
				- npm install
				- npm run build

*********************** STAGE ***********************

	Por padrao o gitlab caso não tenha STAGE ele considera a seguinte linha de raciocinio:

	  stages:
			- build
			- test
			- deploy

	IMPORTANTE: FONTE(https://docs.gitlab.com/ee/ci/yaml/README.html#stages)
		A ordem dos stages itens define a ordem de execução dos trabalhos:
			Os trabalhos no mesmo estágio são executados em paralelo.
			Os trabalhos no próximo estágio são executados depois que os trabalhos do estágio anterior são concluídos com sucesso.

*********************** ARTIFACTS ***********************

	Usamos artefatos para indicar uma lista de arquivos e diretórios que são anexados á tarefa quando ela é 
	bem sucedida
	falha OU sempre.
	isso é configurado com o artifact:when

	exemplo de uso:
	artifacts:
    when: always -> quando será disponibilizado ( sempre (always) mesmo se der sucesso ou falha. )
    expire_in: 2h20min -> remova os arquivos disponibilizado depois de 2 horas e 20 min
    paths:
      - ./website/build/missaodevops -> disponibilize todo esse conteudo.

*********************** 
	SURGE.SH ( NAO TEM A VER COM O GITLAB POREM ELE PUBLICA CONTEUDOS ESTATATICOS PARA APRENDIZADO É OTIMO.) 
***********************

https://surge.sh/

	npm install --global surge

	surge login ( aqui voce cria um login )

	surge list -> lista os domínios que voce tem

	surge --project path/do/projeto/que/sera/publicado --domain nome-do-dominio.surge.sh

*********************** CACHE ***********************

	Guarda valores, para que um job especifico recupere, ou caso o cache fique em local global (na raiz do yml)
	todo job executado executa ele.

	cache: -> aqui eu estou definindo o cache globalmente, ou seja todo job vai usa-lo.
		paths:
			- my/files

	rspec:
		script: test
		cache: -> aqui eu uso o cache em um job especifico, logo esse cache irá sobrescrevrer tudo do cache global, cachear apenas - binaries/
			key: rspec
			paths:
			- binaries/

*********************** BEFORE E AFTER SCRIPT ***********************

	before_script E after_script ambos fazem exatamente o que está escrito, 
		executam um script ANTES ou DEPOIS do script do job por exemplo ( caso esteja dentro do job essa nomenclatura) OU
		executam um script ANTES ou DEPOIS de todos os jobs, caso essa nomenclatura esteja no espaço GLOBAL

	before_script ->

	after_script -> uma das vantagens é separar scrips essenciais que devem executar independente se no seu
		script normal falhar algo, entao exemplo.. independente se falhar o job deve mandar um e-mail, entao colocamos 
		essa linha de comando no after_script, que vai executar independente de falha ou sucesso.

*********************** ENVIRONMENT ***********************

	Podemos usar environment em stages de deploy, para indicarmos em qual ambiente estamos fazendo aquele deploy
		EXEMPLO:
			environment:
				name: homologacao
    		url: http://nick-teste.surge.sh

	Podemos também indicar para o gitlab em qual url esse ambiente irá carregar, passando a url propertie.
		environment:
			name: homologacao
			url: http://nick-teste.surge.sh -> ao inserir a url, para conferir a publicação
				pelo botão, é só entrar no git lab vá no menu Operations -> Environments -> lá vai ter os seus 
				Environments listados e um 3 botões, para visualizar seu site é o primeiro.

*********************** VARIAVEIS ***********************

	Podemos criar variaveis globais e local ( no proprio job ), porem a local obviamente
		só pode ser replicada para o proprio job, e a global conversa entre todos os jobs.

	Exemplo de uso local (global funciona da mesma forma porem declarada no root da aplicação):

	EXEMPLO GLOBAL:
	variables:
		URL_PRODUCTION: XPTO

	EXEMPLO LOCAL:

	deploy to production:
  stage: deploy
  variables:
    URL_PRODUCTION: nick-javascript-lover.surge.sh // aqui eu declaro
  cache: # como é só um teste to reaproveitando o path, mas se fosse real, teria que gerar um novo build apontando para produção.
    key: build-site
    policy: pull 
    paths:
      - ./website/build
  before_script:
    - npm install --global surge@0.23.0
  script:
    - surge --project ./website/build --domain $URL_PRODUCTION // aqui eu uso 
  environment:
    name: production
    url: $URL_PRODUCTION // aqui eu uso 
  only:
    - /^master$/

*********************** GIT_STRATEGY ***********************
	
	tem 3 opções: fetch, clone e none 

	fetch -> é considerada a mais rapida, pois se já tiver algo no workspace ele só atualiza,
		se n tiver ele da um clone.
	clone -> é a mais lenta, ele sempre pega todo o repositório, e se ja tiver um ele exclui.
	none -> não faz nada, ou seja em alguns casos é bom colocar ele para n perder tempo dando fetch ou clone
		pois as vezes voce ja tem toda a informação que precisa em cache.

	variables: 
		URL_STAGING: staging-nick-javascript-lover.surge.sh 
		GIT_STRATEGY: none

*********************** COMBINAÇÕES ***********************

CI_COMMIT_REF_SLUG -> CI_COMMIT_REF_NAME in lowercase, shortened to 63 bytes, 
	and with everything except 0-9 and a-z replaced with -. No leading / trailing -. 
	Use in URLs, host names and domain names.

review_app:
	stage: deploy
	script: make deploy-app
	environment:
		name: review
		on_stop: stop_review_app # aqui eu 

stop_review_app
	when: manual -> como eu quero stopar o app, se eu n colocar when manual ele vai se autostopar.
	environment:
		action: stop


*********************** MERGE ***********************

No arquivo YML, podemos dar merge de algumas informações e sobrescrever informações específicas
quando necessário, no mundo da programação seria como se fosse um implements


exemplo temos mais de um script que faz deploy e eles tem muitas coisas em comum, então utilizamos 
"&nome_do_pai_que_servira_de_base" e para os jobs filhos utilizamos o "<<: *nome_do_pai_que_servira_de_base" :

job1: &deploy # aqui indicamos que esse job1 servira de base para o resto
	script: xpto run
	after_script: xpto start
	only:
		develop

job2: *deploy # aqui indicamos  que o job 2 vai fazer TUDO que o job1 faz

job3: 
 <<: *deploy # aqui indicamos  que o job 3 vai fazer QSE TUDO que o job1 faz 
 after_script: xpto stop_aplicacao
 only:
  master


aqui é só um exemplo de uso, que tem dois cenários:

tenho um JOB pai base, e posso mergear ele todo com outro job sem fazer modificação.
OUUU eu posso mergear E FAZER modificações.


*********************** LIBS INTERESSANTES PARA TESTE ***********************


------------------------ BROKEN LINK CHECKER ------------------------

	npm install -g broken-link-checker

	exemplo de uso após a instalação ( exemplo rodando localmente )

	blc --recursive --external-links http://localhost:3000

	falo para ser recursivo (rodar o site todo)
	falo para ignorar links externos ( facebook etc.. )
	e passo o link que ele deve ter como referencia para buscar as rotas internas desse link

	Executando esse comando ele vai te passar todos os links que estão OK e os NÃO OK também

		esse cara verifica todos os links do seu site e testa para ver se estão funcionando, ou seja é um validador
			de links, muito útil para inserir no pipeline para verificar se todos os links estão íntegros.

------------------------ WAIT ON ------------------------

	npm install wait-on

	Vc pode usar esse cara via linha de comando para esperar por exemplo... por uma url
	Imagina o seguinte cenário, vc precisa startar um servidor angular para testar se as urls dentro dele
	estão funcionando, POREM tem que ser tudo via linha de comando, segue um exemplo: 

	- npm install && npm run start &
  - blc --recursive --exclude-external http://localhost:3000

	Se eu fizer só isso, o terminal vai dar erro, pois o npm run start está executando em 
		background ( por causa do & no final dele (COMANDO LINUX para deixar em background a execução.)
		ai o segundo comando tentaria acessar o servidor ( http://localhost:3000 ) porem não encontraria
		então daria erro...

	para solucionar esse problema tudo via linha de comando, temos o WAIT-ON para nos auxiliar.

	o códgio final ficaria assim:

	- npm install && npm run start & // instalando e rodando servidor
	- wait-on http://localhost:3000/ --timeout 30000 // com wait-on eu falo para esperar http://localhost:3000/ ficar no ar, coloco uma opção de esperar até 30 segundos, pois se demorar muito já disparamos o erro logo e n ficamos prendendo o servidor.
  - blc --recursive --exclude-external http://localhost:3000 // e finalmente aqui eu peço para o broken link checker verificar o sistema para ver se está tudo ok.

	------------------------ SNYK ------------------------

		Ferramenta utilizada para verificar vulnerabilidades no código.

	  1º Instale: npm install -g snyk
		2º autentique ele na sua maquina, para isso vc vai precisar entrar aqui para pegar 
			seu token ( deve fazer o login ) https://app.snyk.io/account
		3º rode o comando: snyk "auth SEU_TOKEN_AQUI" e de enter
		4º rode o comando snyk monitor -> ele vai te dar um link para vc ver as vulnerabilidades.
		5º rode: "snyk wizard" ele te dirá oq está vulneravel, e oq vc precisa fazer para resolver.

		mas no ci, vc vai fazer um pouco diferente..
			vunerabilities check:
				stage: test
				before_script:
					- cd website
					- npm install //instalo todas as dependencias
					- yarn install // aqui também caso precise
				script:
					- npm run test:vulnerabilidade:snyk // como instalei o snyk localmente, eu posso rodar esse comando,
							// porem esse comando depende de autenticação, e para autenticar vc n precisa jogar um 
							// snyk auth SEU_TOKEN_AQUI, vc simplesmente vai no gitlab -> settings -> CI/CD -> Variables
							// e cadastra a chave SNYK_TOKEN com o SEU_TOKEN e pronto, assim que executar esse comando 
							// npm run test:vulnerabilidade:snyk ele já vai ver que o gitlab possui as credenciais 
							// para ter acesso
